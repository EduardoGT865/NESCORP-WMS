//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 15/01/2021 15:41:06
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Reflection;
using System.Linq.Expressions;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects;
using System.Data.Objects.DataClasses;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "TransportCompany_Driver", "TransportCompany", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.TransportCompany), "Drivers", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.Driver), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "UbicationType_WarehouseUbication", "UbicationType", RelationshipMultiplicity.ZeroOrOne, typeof(WMDataAccess.Datamodel.UbicationType), "WarehouseUbications", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WarehouseUbication), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "StoragePattern_StoragePatterUbication", "StoragePattern", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.StoragePattern), "StoragePatterUbications", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.StoragePatterUbication), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "WarehouseUbication_StoragePatterUbication", "WarehouseUbication", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.WarehouseUbication), "StoragePatterUbications", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.StoragePatterUbication), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbication", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.WarehouseUbication), "WarehouseUbicationsLog", RelationshipMultiplicity.ZeroOrOne, typeof(WMDataAccess.Datamodel.WarehouseUbicationLog), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "WorkOrder_WorkOrderLine", "WorkOrder", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.WorkOrder), "WorkOrderLines", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WorkOrderLine), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WorkOrder", "From", RelationshipMultiplicity.ZeroOrOne, typeof(WMDataAccess.Datamodel.WarehouseUbication), "WorkOrders", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WorkOrder), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WorkOrder1", "To", RelationshipMultiplicity.ZeroOrOne, typeof(WMDataAccess.Datamodel.WarehouseUbication), "WorkOrders1", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WorkOrder), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "StoragePattern_WMSInventary", "StoragePattern", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.StoragePattern), "WMSInventaries", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WMSInventary), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "LPNRelation_WorkOrderLine", "LPN", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.LPNRelation), "WorkOrderLines", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WorkOrderLine), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "LPNRelation_ReceiverLineLPN", "LPNRelation", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.LPNRelation), "ReceiverLineLPNs", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.ReceiverLineLPN), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WorkOrderLine", "FromWarehouseUbication", RelationshipMultiplicity.ZeroOrOne, typeof(WMDataAccess.Datamodel.WarehouseUbication), "WorkOrderLines", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WorkOrderLine), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WorkOrderLine1", "ToWarehouseUbication", RelationshipMultiplicity.ZeroOrOne, typeof(WMDataAccess.Datamodel.WarehouseUbication), "WorkOrderLines1", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WorkOrderLine), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "TrunkType_Trunk", "TrunkType", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.TrunkType), "Trunks", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.Trunk), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "TransportCompany_Trunk", "TransportCompany", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.TransportCompany), "Trunks", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.Trunk), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "Delivery_DeliveryLine", "Delivery", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.Delivery), "DeliveryLines", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.DeliveryLine), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "Center_WMSWarehouse", "Center", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.Center), "WMSWarehouses", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WMSWarehouse), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "Gate_Dispatch", "Gate", RelationshipMultiplicity.ZeroOrOne, typeof(WMDataAccess.Datamodel.Gate), "Dispatches", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.Dispatch), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "TransportCompany_Dispatch", "TransportCompany", RelationshipMultiplicity.ZeroOrOne, typeof(WMDataAccess.Datamodel.TransportCompany), "Dispatches", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.Dispatch), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "Dispatch_DispatchLine", "Dispatch", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.Dispatch), "DispatchLines", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.DispatchLine), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "DeliveryLine_DispatchLine", "DeliveryLine", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.DeliveryLine), "DispatchLines", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.DispatchLine), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "TransportTerritory_TransportZone", "TransportTerritory", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.TransportTerritory), "TransportZones", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.TransportZone), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "TrunkType_TransportTax", "TrunkType", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.TrunkType), "TransportTaxes", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.TransportTax), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "TransportCompany_TransportTax", "TransportCompany", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.TransportCompany), "TransportTaxes", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.TransportTax), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "TransportZone_TransportTax", "FromTransportZone", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.TransportZone), "TransportTaxes", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.TransportTax), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "TransportZone_TransportTax1", "ToTransportZone", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.TransportZone), "TransportTaxes1", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.TransportTax), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "PickingArea_WarehouseUbication", "PickingArea", RelationshipMultiplicity.ZeroOrOne, typeof(WMDataAccess.Datamodel.PickingArea), "WarehouseUbications", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WarehouseUbication), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "WMSInventary_PickingArea", "WMSInventaries", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WMSInventary), "PickingAreas", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.PickingArea))]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "DispatchLine_DispatchLineOrder", "DispatchLine", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.DispatchLine), "DispatchLineOrders", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.DispatchLineOrder), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "LPNRelation_WarehouseUbicationLogLevel", "LPNRelation", RelationshipMultiplicity.ZeroOrOne, typeof(WMDataAccess.Datamodel.LPNRelation), "WarehouseUbicationLogLevels", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WarehouseUbicationLogLevel), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "WarehouseUbicationLog_WarehouseUbicationLogLevel", "WarehouseUbicationLog", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.WarehouseUbicationLog), "WarehouseUbicationLogLevels", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.WarehouseUbicationLogLevel), true)]
[assembly: EdmRelationshipAttribute("WMDataAccess.Datamodel", "WarehouseUbication_Gate", "WarehouseUbication", RelationshipMultiplicity.One, typeof(WMDataAccess.Datamodel.WarehouseUbication), "Gates", RelationshipMultiplicity.Many, typeof(WMDataAccess.Datamodel.Gate), true)]

#endregion

namespace WMDataAccess.Datamodel
{

    #region WMDBContext

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class WMDBContext : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new WMDBContext object.
        /// </summary>
        public WMDBContext() :
                base(@"name=Sage500AppEntitiesConnectionString", "WMDBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new WMDBContext object using the connection string found in the 'WMDBContext' section of the application configuration file.
        /// </summary>
        public WMDBContext(string connectionString) :
                base(connectionString, "WMDBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new WMDBContext object.
        /// </summary>
        public WMDBContext(EntityConnection connection) : base(connection, "WMDBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }


        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Center> Centers
        {
            get
            {
                if ((_Centers == null))
                {
                    _Centers = base.CreateObjectSet<Center>("Centers");
                }
                return _Centers;
            }
        }
        private ObjectSet<Center> _Centers;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UbicationType> UbicationTypes
        {
            get
            {
                if ((_UbicationTypes == null))
                {
                    _UbicationTypes = base.CreateObjectSet<UbicationType>("UbicationTypes");
                }
                return _UbicationTypes;
            }
        }
        private ObjectSet<UbicationType> _UbicationTypes;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TransportCompany> TransportCompanies
        {
            get
            {
                if ((_TransportCompanies == null))
                {
                    _TransportCompanies = base.CreateObjectSet<TransportCompany>("TransportCompanies");
                }
                return _TransportCompanies;
            }
        }
        private ObjectSet<TransportCompany> _TransportCompanies;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Driver> Drivers
        {
            get
            {
                if ((_Drivers == null))
                {
                    _Drivers = base.CreateObjectSet<Driver>("Drivers");
                }
                return _Drivers;
            }
        }
        private ObjectSet<Driver> _Drivers;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WarehouseUbication> WarehouseUbications
        {
            get
            {
                if ((_WarehouseUbications == null))
                {
                    _WarehouseUbications = base.CreateObjectSet<WarehouseUbication>("WarehouseUbications");
                }
                return _WarehouseUbications;
            }
        }
        private ObjectSet<WarehouseUbication> _WarehouseUbications;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Gate> Gates
        {
            get
            {
                if ((_Gates == null))
                {
                    _Gates = base.CreateObjectSet<Gate>("Gates");
                }
                return _Gates;
            }
        }
        private ObjectSet<Gate> _Gates;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StoragePattern> StoragePatterns
        {
            get
            {
                if ((_StoragePatterns == null))
                {
                    _StoragePatterns = base.CreateObjectSet<StoragePattern>("StoragePatterns");
                }
                return _StoragePatterns;
            }
        }
        private ObjectSet<StoragePattern> _StoragePatterns;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StoragePatterUbication> StoragePatterUbications
        {
            get
            {
                if ((_StoragePatterUbications == null))
                {
                    _StoragePatterUbications = base.CreateObjectSet<StoragePatterUbication>("StoragePatterUbications");
                }
                return _StoragePatterUbications;
            }
        }
        private ObjectSet<StoragePatterUbication> _StoragePatterUbications;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WarehouseUbicationLog> WarehouseUbicationLogs
        {
            get
            {
                if ((_WarehouseUbicationLogs == null))
                {
                    _WarehouseUbicationLogs = base.CreateObjectSet<WarehouseUbicationLog>("WarehouseUbicationLogs");
                }
                return _WarehouseUbicationLogs;
            }
        }
        private ObjectSet<WarehouseUbicationLog> _WarehouseUbicationLogs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WorkOrder> WorkOrders
        {
            get
            {
                if ((_WorkOrders == null))
                {
                    _WorkOrders = base.CreateObjectSet<WorkOrder>("WorkOrders");
                }
                return _WorkOrders;
            }
        }
        private ObjectSet<WorkOrder> _WorkOrders;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WorkOrderLine> WorkOrderLines
        {
            get
            {
                if ((_WorkOrderLines == null))
                {
                    _WorkOrderLines = base.CreateObjectSet<WorkOrderLine>("WorkOrderLines");
                }
                return _WorkOrderLines;
            }
        }
        private ObjectSet<WorkOrderLine> _WorkOrderLines;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WMSInventary> WMSInventaries
        {
            get
            {
                if ((_WMSInventaries == null))
                {
                    _WMSInventaries = base.CreateObjectSet<WMSInventary>("WMSInventaries");
                }
                return _WMSInventaries;
            }
        }
        private ObjectSet<WMSInventary> _WMSInventaries;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LPNRelation> LPNRelations
        {
            get
            {
                if ((_LPNRelations == null))
                {
                    _LPNRelations = base.CreateObjectSet<LPNRelation>("LPNRelations");
                }
                return _LPNRelations;
            }
        }
        private ObjectSet<LPNRelation> _LPNRelations;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ReceiverLineLPN> ReceiverLineLPNs
        {
            get
            {
                if ((_ReceiverLineLPNs == null))
                {
                    _ReceiverLineLPNs = base.CreateObjectSet<ReceiverLineLPN>("ReceiverLineLPNs");
                }
                return _ReceiverLineLPNs;
            }
        }
        private ObjectSet<ReceiverLineLPN> _ReceiverLineLPNs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WMOption> WMOptions
        {
            get
            {
                if ((_WMOptions == null))
                {
                    _WMOptions = base.CreateObjectSet<WMOption>("WMOptions");
                }
                return _WMOptions;
            }
        }
        private ObjectSet<WMOption> _WMOptions;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ItemData> ItemDatas
        {
            get
            {
                if ((_ItemDatas == null))
                {
                    _ItemDatas = base.CreateObjectSet<ItemData>("ItemDatas");
                }
                return _ItemDatas;
            }
        }
        private ObjectSet<ItemData> _ItemDatas;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Customer> Customers
        {
            get
            {
                if ((_Customers == null))
                {
                    _Customers = base.CreateObjectSet<Customer>("Customers");
                }
                return _Customers;
            }
        }
        private ObjectSet<Customer> _Customers;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrunkType> TrunkTypes
        {
            get
            {
                if ((_TrunkTypes == null))
                {
                    _TrunkTypes = base.CreateObjectSet<TrunkType>("TrunkTypes");
                }
                return _TrunkTypes;
            }
        }
        private ObjectSet<TrunkType> _TrunkTypes;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TransportZone> TransportZones
        {
            get
            {
                if ((_TransportZones == null))
                {
                    _TransportZones = base.CreateObjectSet<TransportZone>("TransportZones");
                }
                return _TransportZones;
            }
        }
        private ObjectSet<TransportZone> _TransportZones;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Trunk> Trunks
        {
            get
            {
                if ((_Trunks == null))
                {
                    _Trunks = base.CreateObjectSet<Trunk>("Trunks");
                }
                return _Trunks;
            }
        }
        private ObjectSet<Trunk> _Trunks;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Delivery> Deliveries
        {
            get
            {
                if ((_Deliveries == null))
                {
                    _Deliveries = base.CreateObjectSet<Delivery>("Deliveries");
                }
                return _Deliveries;
            }
        }
        private ObjectSet<Delivery> _Deliveries;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DeliveryLine> DeliveryLines
        {
            get
            {
                if ((_DeliveryLines == null))
                {
                    _DeliveryLines = base.CreateObjectSet<DeliveryLine>("DeliveryLines");
                }
                return _DeliveryLines;
            }
        }
        private ObjectSet<DeliveryLine> _DeliveryLines;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WMSWarehouse> WMSWarehouses
        {
            get
            {
                if ((_WMSWarehouses == null))
                {
                    _WMSWarehouses = base.CreateObjectSet<WMSWarehouse>("WMSWarehouses");
                }
                return _WMSWarehouses;
            }
        }
        private ObjectSet<WMSWarehouse> _WMSWarehouses;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Dispatch> Dispatches
        {
            get
            {
                if ((_Dispatches == null))
                {
                    _Dispatches = base.CreateObjectSet<Dispatch>("Dispatches");
                }
                return _Dispatches;
            }
        }
        private ObjectSet<Dispatch> _Dispatches;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DispatchLine> DispatchLines
        {
            get
            {
                if ((_DispatchLines == null))
                {
                    _DispatchLines = base.CreateObjectSet<DispatchLine>("DispatchLines");
                }
                return _DispatchLines;
            }
        }
        private ObjectSet<DispatchLine> _DispatchLines;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TransportTerritory> TransportTerritories
        {
            get
            {
                if ((_TransportTerritories == null))
                {
                    _TransportTerritories = base.CreateObjectSet<TransportTerritory>("TransportTerritories");
                }
                return _TransportTerritories;
            }
        }
        private ObjectSet<TransportTerritory> _TransportTerritories;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TransportTax> TransportTaxes
        {
            get
            {
                if ((_TransportTaxes == null))
                {
                    _TransportTaxes = base.CreateObjectSet<TransportTax>("TransportTaxes");
                }
                return _TransportTaxes;
            }
        }
        private ObjectSet<TransportTax> _TransportTaxes;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PickingArea> PickingAreas
        {
            get
            {
                if ((_PickingAreas == null))
                {
                    _PickingAreas = base.CreateObjectSet<PickingArea>("PickingAreas");
                }
                return _PickingAreas;
            }
        }
        private ObjectSet<PickingArea> _PickingAreas;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DispatchLineOrder> DispatchLineOrders
        {
            get
            {
                if ((_DispatchLineOrders == null))
                {
                    _DispatchLineOrders = base.CreateObjectSet<DispatchLineOrder>("DispatchLineOrders");
                }
                return _DispatchLineOrders;
            }
        }
        private ObjectSet<DispatchLineOrder> _DispatchLineOrders;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WarehouseUbicationLogLevel> WarehouseUbicationLogLevels
        {
            get
            {
                if ((_WarehouseUbicationLogLevels == null))
                {
                    _WarehouseUbicationLogLevels = base.CreateObjectSet<WarehouseUbicationLogLevel>("WarehouseUbicationLogLevels");
                }
                return _WarehouseUbicationLogLevels;
            }
        }
        private ObjectSet<WarehouseUbicationLogLevel> _WarehouseUbicationLogLevels;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WMSParameter> WMSParameters
        {
            get
            {
                if ((_WMSParameters == null))
                {
                    _WMSParameters = base.CreateObjectSet<WMSParameter>("WMSParameters");
                }
                return _WMSParameters;
            }
        }
        private ObjectSet<WMSParameter> _WMSParameters;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WarehouseUbicationLogLevelWeight> WarehouseUbicationLogLevelWeights
        {
            get
            {
                if ((_WarehouseUbicationLogLevelWeights == null))
                {
                    _WarehouseUbicationLogLevelWeights = base.CreateObjectSet<WarehouseUbicationLogLevelWeight>("WarehouseUbicationLogLevelWeights");
                }
                return _WarehouseUbicationLogLevelWeights;
            }
        }
        private ObjectSet<WarehouseUbicationLogLevelWeight> _WarehouseUbicationLogLevelWeights;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Centers EntitySet.
        /// </summary>
        public void AddToCenters(Center center)
        {
            base.AddObject("Centers", center);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the UbicationTypes EntitySet.
        /// </summary>
        public void AddToUbicationTypes(UbicationType ubicationType)
        {
            base.AddObject("UbicationTypes", ubicationType);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TransportCompanies EntitySet.
        /// </summary>
        public void AddToTransportCompanies(TransportCompany transportCompany)
        {
            base.AddObject("TransportCompanies", transportCompany);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Drivers EntitySet.
        /// </summary>
        public void AddToDrivers(Driver driver)
        {
            base.AddObject("Drivers", driver);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the WarehouseUbications EntitySet.
        /// </summary>
        public void AddToWarehouseUbications(WarehouseUbication warehouseUbication)
        {
            base.AddObject("WarehouseUbications", warehouseUbication);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Gates EntitySet.
        /// </summary>
        public void AddToGates(Gate gate)
        {
            base.AddObject("Gates", gate);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the StoragePatterns EntitySet.
        /// </summary>
        public void AddToStoragePatterns(StoragePattern storagePattern)
        {
            base.AddObject("StoragePatterns", storagePattern);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the StoragePatterUbications EntitySet.
        /// </summary>
        public void AddToStoragePatterUbications(StoragePatterUbication storagePatterUbication)
        {
            base.AddObject("StoragePatterUbications", storagePatterUbication);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the WarehouseUbicationLogs EntitySet.
        /// </summary>
        public void AddToWarehouseUbicationLogs(WarehouseUbicationLog warehouseUbicationLog)
        {
            base.AddObject("WarehouseUbicationLogs", warehouseUbicationLog);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the WorkOrders EntitySet.
        /// </summary>
        public void AddToWorkOrders(WorkOrder workOrder)
        {
            base.AddObject("WorkOrders", workOrder);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the WorkOrderLines EntitySet.
        /// </summary>
        public void AddToWorkOrderLines(WorkOrderLine workOrderLine)
        {
            base.AddObject("WorkOrderLines", workOrderLine);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the WMSInventaries EntitySet.
        /// </summary>
        public void AddToWMSInventaries(WMSInventary wMSInventary)
        {
            base.AddObject("WMSInventaries", wMSInventary);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the LPNRelations EntitySet.
        /// </summary>
        public void AddToLPNRelations(LPNRelation lPNRelation)
        {
            base.AddObject("LPNRelations", lPNRelation);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the ReceiverLineLPNs EntitySet.
        /// </summary>
        public void AddToReceiverLineLPNs(ReceiverLineLPN receiverLineLPN)
        {
            base.AddObject("ReceiverLineLPNs", receiverLineLPN);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the WMOptions EntitySet.
        /// </summary>
        public void AddToWMOptions(WMOption wMOption)
        {
            base.AddObject("WMOptions", wMOption);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the ItemDatas EntitySet.
        /// </summary>
        public void AddToItemDatas(ItemData itemData)
        {
            base.AddObject("ItemDatas", itemData);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Customers EntitySet.
        /// </summary>
        public void AddToCustomers(Customer customer)
        {
            base.AddObject("Customers", customer);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TrunkTypes EntitySet.
        /// </summary>
        public void AddToTrunkTypes(TrunkType trunkType)
        {
            base.AddObject("TrunkTypes", trunkType);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TransportZones EntitySet.
        /// </summary>
        public void AddToTransportZones(TransportZone transportZone)
        {
            base.AddObject("TransportZones", transportZone);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Trunks EntitySet.
        /// </summary>
        public void AddToTrunks(Trunk trunk)
        {
            base.AddObject("Trunks", trunk);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Deliveries EntitySet.
        /// </summary>
        public void AddToDeliveries(Delivery delivery)
        {
            base.AddObject("Deliveries", delivery);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DeliveryLines EntitySet.
        /// </summary>
        public void AddToDeliveryLines(DeliveryLine deliveryLine)
        {
            base.AddObject("DeliveryLines", deliveryLine);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the WMSWarehouses EntitySet.
        /// </summary>
        public void AddToWMSWarehouses(WMSWarehouse wMSWarehouse)
        {
            base.AddObject("WMSWarehouses", wMSWarehouse);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Dispatches EntitySet.
        /// </summary>
        public void AddToDispatches(Dispatch dispatch)
        {
            base.AddObject("Dispatches", dispatch);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DispatchLines EntitySet.
        /// </summary>
        public void AddToDispatchLines(DispatchLine dispatchLine)
        {
            base.AddObject("DispatchLines", dispatchLine);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TransportTerritories EntitySet.
        /// </summary>
        public void AddToTransportTerritories(TransportTerritory transportTerritory)
        {
            base.AddObject("TransportTerritories", transportTerritory);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TransportTaxes EntitySet.
        /// </summary>
        public void AddToTransportTaxes(TransportTax transportTax)
        {
            base.AddObject("TransportTaxes", transportTax);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the PickingAreas EntitySet.
        /// </summary>
        public void AddToPickingAreas(PickingArea pickingArea)
        {
            base.AddObject("PickingAreas", pickingArea);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DispatchLineOrders EntitySet.
        /// </summary>
        public void AddToDispatchLineOrders(DispatchLineOrder dispatchLineOrder)
        {
            base.AddObject("DispatchLineOrders", dispatchLineOrder);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the WarehouseUbicationLogLevels EntitySet.
        /// </summary>
        public void AddToWarehouseUbicationLogLevels(WarehouseUbicationLogLevel warehouseUbicationLogLevel)
        {
            base.AddObject("WarehouseUbicationLogLevels", warehouseUbicationLogLevel);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the WMSParameters EntitySet.
        /// </summary>
        public void AddToWMSParameters(WMSParameter wMSParameter)
        {
            base.AddObject("WMSParameters", wMSParameter);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the WarehouseUbicationLogLevelWeights EntitySet.
        /// </summary>
        public void AddToWarehouseUbicationLogLevelWeights(WarehouseUbicationLogLevelWeight warehouseUbicationLogLevelWeight)
        {
            base.AddObject("WarehouseUbicationLogLevelWeights", warehouseUbicationLogLevelWeight);
        }

        #endregion

        #region Methods

    
        /// <summary>
        /// There are no comments for GenerateLPNFromRcvr in the schema.
        /// </summary>
        public virtual void GenerateLPNFromRcvr (int? RcvrKey, ref int? RetVal)
        {
            bool needClose = false;
            if (this.Connection.State != System.Data.ConnectionState.Open) {
              this.Connection.Open();
              needClose = true;
            }

			try {
              using(EntityCommand command = new EntityCommand()) 
              {
                if(this.CommandTimeout.HasValue)
                  command.CommandTimeout = this.CommandTimeout.Value;
                command.CommandType = System.Data.CommandType.StoredProcedure;
                command.CommandText = @"WMDBContext.GenerateLPNFromRcvr";
                command.Connection = (EntityConnection)this.Connection;
                EntityParameter RcvrKeyParameter = new EntityParameter("RcvrKey", System.Data.DbType.Int32);
                RcvrKeyParameter.Direction = ParameterDirection.Input;
                if (RcvrKey.HasValue)
                  RcvrKeyParameter.Value = RcvrKey;
                command.Parameters.Add(RcvrKeyParameter);
                EntityParameter RetValParameter = new EntityParameter("RetVal", System.Data.DbType.Int32);
                RetValParameter.Direction = ParameterDirection.InputOutput;
                if (RetVal.HasValue)
                  RetValParameter.Value = RetVal;
                command.Parameters.Add(RetValParameter);
                command.ExecuteNonQuery();
                if (RetValParameter.Value != null && !(RetValParameter.Value is System.DBNull))
                  RetVal = (int?)RetValParameter.Value;
                else
                  RetVal = default(int?);
              }
            }
            finally {
              if (needClose)
                this.Connection.Close();
            }
        }

        #endregion
    }

    #endregion
}

namespace WMDataAccess.Datamodel
{

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.Center in the schema.
    /// </summary>
    /// <KeyProperties>
    /// DistributionCenterKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="Center")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Centro")]
    public partial class Center : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new Center object.
        /// </summary>
        /// <param name="distributionCenterKey">Initial value of DistributionCenterKey.</param>
        /// <param name="distributionCenterID">Initial value of DistributionCenterID.</param>
        /// <param name="description">Initial value of Description.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <param name="active">Initial value of Active.</param>
        /// <param name="type">Initial value of Type.</param>
        public static Center CreateCenter(int distributionCenterKey, string distributionCenterID, string description, string companyID, bool active, short type)
        {
            Center center = new Center();
            center.DistributionCenterKey = distributionCenterKey;
            center.DistributionCenterID = distributionCenterID;
            center.Description = description;
            center.CompanyID = companyID;
            center.Active = active;
            center.Type = type;
            return center;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DistributionCenterKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int DistributionCenterKey
        {
            get
            {
                int value = _DistributionCenterKey;
                OnGetDistributionCenterKey(ref value);
                return value;
            }
            set
            {
                if (_DistributionCenterKey != value)
                {
                  OnDistributionCenterKeyChanging(ref value);
                  ReportPropertyChanging("DistributionCenterKey");
                  _DistributionCenterKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DistributionCenterKey");
                  OnDistributionCenterKeyChanged();
              }
            }
        }
        private int _DistributionCenterKey;
        partial void OnGetDistributionCenterKey(ref int value);
        partial void OnDistributionCenterKeyChanging(ref int value);
        partial void OnDistributionCenterKeyChanged();
    
        /// <summary>
        /// There are no comments for DistributionCenterID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Centro")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Centro")]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        public virtual string DistributionCenterID
        {
            get
            {
                string value = _DistributionCenterID;
                OnGetDistributionCenterID(ref value);
                return value;
            }
            set
            {
                if (_DistributionCenterID != value)
                {
                  OnDistributionCenterIDChanging(ref value);
                  ReportPropertyChanging("DistributionCenterID");
                  _DistributionCenterID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DistributionCenterID");
                  OnDistributionCenterIDChanged();
              }
            }
        }
        private string _DistributionCenterID;
        partial void OnGetDistributionCenterID(ref string value);
        partial void OnDistributionCenterIDChanging(ref string value);
        partial void OnDistributionCenterIDChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Descripción")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Descripción")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool Active
        {
            get
            {
                bool value = _Active;
                OnGetActive(ref value);
                return value;
            }
            set
            {
                if (_Active != value)
                {
                  OnActiveChanging(ref value);
                  ReportPropertyChanging("Active");
                  _Active = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Active");
                  OnActiveChanged();
              }
            }
        }
        private bool _Active;
        partial void OnGetActive(ref bool value);
        partial void OnActiveChanging(ref bool value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupStaticColumn(@"twmCenters", @"Type")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Tipo")]
        public virtual short Type
        {
            get
            {
                short value = _Type;
                OnGetType(ref value);
                return value;
            }
            set
            {
                if (_Type != value)
                {
                  OnTypeChanging(ref value);
                  ReportPropertyChanging("Type");
                  _Type = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Type");
                  OnTypeChanged();
              }
            }
        }
        private short _Type;
        partial void OnGetType(ref short value);
        partial void OnTypeChanging(ref short value);
        partial void OnTypeChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for WMSWarehouses in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "Center_WMSWarehouse", "WMSWarehouses")]
        public virtual EntityCollection<WMSWarehouse> WMSWarehouses
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<WMSWarehouse>("WMDataAccess.Datamodel.Center_WMSWarehouse", "WMSWarehouses");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<WMSWarehouse>("WMDataAccess.Datamodel.Center_WMSWarehouse", "WMSWarehouses", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Center obj = new Center();
            obj.DistributionCenterKey = DistributionCenterKey;
            obj.DistributionCenterID = DistributionCenterID;
            obj.Description = Description;
            obj.CompanyID = CompanyID;
            obj.Active = Active;
            obj.Type = Type;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          Center toCompare = obj as Center;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.DistributionCenterKey, toCompare.DistributionCenterKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + DistributionCenterKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.UbicationType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// UbicationTypeKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="UbicationType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Tipo de Ubicación")]
    public partial class UbicationType : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new UbicationType object.
        /// </summary>
        /// <param name="ubicationTypeKey">Initial value of UbicationTypeKey.</param>
        /// <param name="ubicationTypeID">Initial value of UbicationTypeID.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <param name="description">Initial value of Description.</param>
        /// <param name="active">Initial value of Active.</param>
        /// <param name="isPicking">Initial value of IsPicking.</param>
        /// <param name="capacity">Initial value of Capacity.</param>
        /// <param name="levelQty">Initial value of LevelQty.</param>
        public static UbicationType CreateUbicationType(int ubicationTypeKey, string ubicationTypeID, string companyID, string description, bool active, bool isPicking, short capacity, short levelQty)
        {
            UbicationType ubicationType = new UbicationType();
            ubicationType.UbicationTypeKey = ubicationTypeKey;
            ubicationType.UbicationTypeID = ubicationTypeID;
            ubicationType.CompanyID = companyID;
            ubicationType.Description = description;
            ubicationType.Active = active;
            ubicationType.IsPicking = isPicking;
            ubicationType.Capacity = capacity;
            ubicationType.LevelQty = levelQty;
            return ubicationType;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for UbicationTypeKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int UbicationTypeKey
        {
            get
            {
                int value = _UbicationTypeKey;
                OnGetUbicationTypeKey(ref value);
                return value;
            }
            set
            {
                if (_UbicationTypeKey != value)
                {
                  OnUbicationTypeKeyChanging(ref value);
                  ReportPropertyChanging("UbicationTypeKey");
                  _UbicationTypeKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("UbicationTypeKey");
                  OnUbicationTypeKeyChanged();
              }
            }
        }
        private int _UbicationTypeKey;
        partial void OnGetUbicationTypeKey(ref int value);
        partial void OnUbicationTypeKeyChanging(ref int value);
        partial void OnUbicationTypeKeyChanged();
    
        /// <summary>
        /// There are no comments for UbicationTypeID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Tipo")]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Tipo")]
        public virtual string UbicationTypeID
        {
            get
            {
                string value = _UbicationTypeID;
                OnGetUbicationTypeID(ref value);
                return value;
            }
            set
            {
                if (_UbicationTypeID != value)
                {
                  OnUbicationTypeIDChanging(ref value);
                  ReportPropertyChanging("UbicationTypeID");
                  _UbicationTypeID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("UbicationTypeID");
                  OnUbicationTypeIDChanged();
              }
            }
        }
        private string _UbicationTypeID;
        partial void OnGetUbicationTypeID(ref string value);
        partial void OnUbicationTypeIDChanging(ref string value);
        partial void OnUbicationTypeIDChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Descripción")]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Descripción")]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool Active
        {
            get
            {
                bool value = _Active;
                OnGetActive(ref value);
                return value;
            }
            set
            {
                if (_Active != value)
                {
                  OnActiveChanging(ref value);
                  ReportPropertyChanging("Active");
                  _Active = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Active");
                  OnActiveChanged();
              }
            }
        }
        private bool _Active;
        partial void OnGetActive(ref bool value);
        partial void OnActiveChanging(ref bool value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// There are no comments for ProdCatKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? ProdCatKey
        {
            get
            {
                int? value = _ProdCatKey;
                OnGetProdCatKey(ref value);
                return value;
            }
            set
            {
                if (_ProdCatKey != value)
                {
                  OnProdCatKeyChanging(ref value);
                  ReportPropertyChanging("ProdCatKey");
                  _ProdCatKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ProdCatKey");
                  OnProdCatKeyChanged();
              }
            }
        }
        private int? _ProdCatKey;
        partial void OnGetProdCatKey(ref int? value);
        partial void OnProdCatKeyChanging(ref int? value);
        partial void OnProdCatKeyChanged();
    
        /// <summary>
        /// There are no comments for IsPicking in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool IsPicking
        {
            get
            {
                bool value = _IsPicking;
                OnGetIsPicking(ref value);
                return value;
            }
            set
            {
                if (_IsPicking != value)
                {
                  OnIsPickingChanging(ref value);
                  ReportPropertyChanging("IsPicking");
                  _IsPicking = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IsPicking");
                  OnIsPickingChanged();
              }
            }
        }
        private bool _IsPicking;
        partial void OnGetIsPicking(ref bool value);
        partial void OnIsPickingChanging(ref bool value);
        partial void OnIsPickingChanged();
    
        /// <summary>
        /// There are no comments for Capacity in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short Capacity
        {
            get
            {
                short value = _Capacity;
                OnGetCapacity(ref value);
                return value;
            }
            set
            {
                if (_Capacity != value)
                {
                  OnCapacityChanging(ref value);
                  ReportPropertyChanging("Capacity");
                  _Capacity = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Capacity");
                  OnCapacityChanged();
              }
            }
        }
        private short _Capacity;
        partial void OnGetCapacity(ref short value);
        partial void OnCapacityChanging(ref short value);
        partial void OnCapacityChanged();
    
        /// <summary>
        /// There are no comments for LevelQty in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short LevelQty
        {
            get
            {
                short value = _LevelQty;
                OnGetLevelQty(ref value);
                return value;
            }
            set
            {
                if (_LevelQty != value)
                {
                  OnLevelQtyChanging(ref value);
                  ReportPropertyChanging("LevelQty");
                  _LevelQty = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LevelQty");
                  OnLevelQtyChanged();
              }
            }
        }
        private short _LevelQty;
        partial void OnGetLevelQty(ref short value);
        partial void OnLevelQtyChanging(ref short value);
        partial void OnLevelQtyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for WarehouseUbications in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "UbicationType_WarehouseUbication", "WarehouseUbications")]
        public virtual EntityCollection<WarehouseUbication> WarehouseUbications
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<WarehouseUbication>("WMDataAccess.Datamodel.UbicationType_WarehouseUbication", "WarehouseUbications");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<WarehouseUbication>("WMDataAccess.Datamodel.UbicationType_WarehouseUbication", "WarehouseUbications", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            UbicationType obj = new UbicationType();
            obj.UbicationTypeKey = UbicationTypeKey;
            obj.UbicationTypeID = UbicationTypeID;
            obj.CompanyID = CompanyID;
            obj.Description = Description;
            obj.Active = Active;
            obj.ProdCatKey = ProdCatKey;
            obj.IsPicking = IsPicking;
            obj.Capacity = Capacity;
            obj.LevelQty = LevelQty;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          UbicationType toCompare = obj as UbicationType;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.UbicationTypeKey, toCompare.UbicationTypeKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + UbicationTypeKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.TransportCompany in the schema.
    /// </summary>
    /// <KeyProperties>
    /// TransCompanyKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="TransportCompany")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Compañia de Transporte")]
    public partial class TransportCompany : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new TransportCompany object.
        /// </summary>
        /// <param name="transCompanyKey">Initial value of TransCompanyKey.</param>
        /// <param name="transCompanyID">Initial value of TransCompanyID.</param>
        /// <param name="description">Initial value of Description.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <param name="active">Initial value of Active.</param>
        public static TransportCompany CreateTransportCompany(int transCompanyKey, string transCompanyID, string description, string companyID, bool active)
        {
            TransportCompany transportCompany = new TransportCompany();
            transportCompany.TransCompanyKey = transCompanyKey;
            transportCompany.TransCompanyID = transCompanyID;
            transportCompany.Description = description;
            transportCompany.CompanyID = companyID;
            transportCompany.Active = active;
            return transportCompany;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for TransCompanyKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int TransCompanyKey
        {
            get
            {
                int value = _TransCompanyKey;
                OnGetTransCompanyKey(ref value);
                return value;
            }
            set
            {
                if (_TransCompanyKey != value)
                {
                  OnTransCompanyKeyChanging(ref value);
                  ReportPropertyChanging("TransCompanyKey");
                  _TransCompanyKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TransCompanyKey");
                  OnTransCompanyKeyChanged();
              }
            }
        }
        private int _TransCompanyKey;
        partial void OnGetTransCompanyKey(ref int value);
        partial void OnTransCompanyKeyChanging(ref int value);
        partial void OnTransCompanyKeyChanged();
    
        /// <summary>
        /// There are no comments for TransCompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Compañia de Transporte")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Compañia de Transporte")]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        public virtual string TransCompanyID
        {
            get
            {
                string value = _TransCompanyID;
                OnGetTransCompanyID(ref value);
                return value;
            }
            set
            {
                if (_TransCompanyID != value)
                {
                  OnTransCompanyIDChanging(ref value);
                  ReportPropertyChanging("TransCompanyID");
                  _TransCompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TransCompanyID");
                  OnTransCompanyIDChanged();
              }
            }
        }
        private string _TransCompanyID;
        partial void OnGetTransCompanyID(ref string value);
        partial void OnTransCompanyIDChanging(ref string value);
        partial void OnTransCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Descripción")]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Descripción")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool Active
        {
            get
            {
                bool value = _Active;
                OnGetActive(ref value);
                return value;
            }
            set
            {
                if (_Active != value)
                {
                  OnActiveChanging(ref value);
                  ReportPropertyChanging("Active");
                  _Active = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Active");
                  OnActiveChanged();
              }
            }
        }
        private bool _Active;
        partial void OnGetActive(ref bool value);
        partial void OnActiveChanging(ref bool value);
        partial void OnActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Drivers in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportCompany_Driver", "Drivers")]
        public virtual EntityCollection<Driver> Drivers
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Driver>("WMDataAccess.Datamodel.TransportCompany_Driver", "Drivers");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Driver>("WMDataAccess.Datamodel.TransportCompany_Driver", "Drivers", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Trunks in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportCompany_Trunk", "Trunks")]
        public virtual EntityCollection<Trunk> Trunks
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Trunk>("WMDataAccess.Datamodel.TransportCompany_Trunk", "Trunks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Trunk>("WMDataAccess.Datamodel.TransportCompany_Trunk", "Trunks", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Dispatches in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportCompany_Dispatch", "Dispatches")]
        public virtual EntityCollection<Dispatch> Dispatches
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Dispatch>("WMDataAccess.Datamodel.TransportCompany_Dispatch", "Dispatches");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Dispatch>("WMDataAccess.Datamodel.TransportCompany_Dispatch", "Dispatches", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TransportTaxes in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportCompany_TransportTax", "TransportTaxes")]
        public virtual EntityCollection<TransportTax> TransportTaxes
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TransportTax>("WMDataAccess.Datamodel.TransportCompany_TransportTax", "TransportTaxes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TransportTax>("WMDataAccess.Datamodel.TransportCompany_TransportTax", "TransportTaxes", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            TransportCompany obj = new TransportCompany();
            obj.TransCompanyKey = TransCompanyKey;
            obj.TransCompanyID = TransCompanyID;
            obj.Description = Description;
            obj.CompanyID = CompanyID;
            obj.Active = Active;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          TransportCompany toCompare = obj as TransportCompany;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.TransCompanyKey, toCompare.TransCompanyKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + TransCompanyKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.Driver in the schema.
    /// </summary>
    /// <KeyProperties>
    /// DriverKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="Driver")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Driver : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new Driver object.
        /// </summary>
        /// <param name="driverKey">Initial value of DriverKey.</param>
        /// <param name="driverID">Initial value of DriverID.</param>
        /// <param name="driverName">Initial value of DriverName.</param>
        /// <param name="driverLastName">Initial value of DriverLastName.</param>
        /// <param name="driverCI">Initial value of DriverCI.</param>
        /// <param name="driverLicence">Initial value of DriverLicence.</param>
        /// <param name="transCompanyKey">Initial value of TransCompanyKey.</param>
        public static Driver CreateDriver(int driverKey, string driverID, string driverName, string driverLastName, string driverCI, string driverLicence, int transCompanyKey)
        {
            Driver driver = new Driver();
            driver.DriverKey = driverKey;
            driver.DriverID = driverID;
            driver.DriverName = driverName;
            driver.DriverLastName = driverLastName;
            driver.DriverCI = driverCI;
            driver.DriverLicence = driverLicence;
            driver.TransCompanyKey = transCompanyKey;
            return driver;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DriverKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DriverKey
        {
            get
            {
                int value = _DriverKey;
                OnGetDriverKey(ref value);
                return value;
            }
            set
            {
                if (_DriverKey != value)
                {
                  OnDriverKeyChanging(ref value);
                  ReportPropertyChanging("DriverKey");
                  _DriverKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DriverKey");
                  OnDriverKeyChanged();
              }
            }
        }
        private int _DriverKey;
        partial void OnGetDriverKey(ref int value);
        partial void OnDriverKeyChanging(ref int value);
        partial void OnDriverKeyChanged();
    
        /// <summary>
        /// There are no comments for DriverID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string DriverID
        {
            get
            {
                string value = _DriverID;
                OnGetDriverID(ref value);
                return value;
            }
            set
            {
                if (_DriverID != value)
                {
                  OnDriverIDChanging(ref value);
                  ReportPropertyChanging("DriverID");
                  _DriverID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DriverID");
                  OnDriverIDChanged();
              }
            }
        }
        private string _DriverID;
        partial void OnGetDriverID(ref string value);
        partial void OnDriverIDChanging(ref string value);
        partial void OnDriverIDChanged();
    
        /// <summary>
        /// There are no comments for DriverName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string DriverName
        {
            get
            {
                string value = _DriverName;
                OnGetDriverName(ref value);
                return value;
            }
            set
            {
                if (_DriverName != value)
                {
                  OnDriverNameChanging(ref value);
                  ReportPropertyChanging("DriverName");
                  _DriverName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DriverName");
                  OnDriverNameChanged();
              }
            }
        }
        private string _DriverName;
        partial void OnGetDriverName(ref string value);
        partial void OnDriverNameChanging(ref string value);
        partial void OnDriverNameChanged();
    
        /// <summary>
        /// There are no comments for DriverLastName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string DriverLastName
        {
            get
            {
                string value = _DriverLastName;
                OnGetDriverLastName(ref value);
                return value;
            }
            set
            {
                if (_DriverLastName != value)
                {
                  OnDriverLastNameChanging(ref value);
                  ReportPropertyChanging("DriverLastName");
                  _DriverLastName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DriverLastName");
                  OnDriverLastNameChanged();
              }
            }
        }
        private string _DriverLastName;
        partial void OnGetDriverLastName(ref string value);
        partial void OnDriverLastNameChanging(ref string value);
        partial void OnDriverLastNameChanged();
    
        /// <summary>
        /// There are no comments for DriverCI in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string DriverCI
        {
            get
            {
                string value = _DriverCI;
                OnGetDriverCI(ref value);
                return value;
            }
            set
            {
                if (_DriverCI != value)
                {
                  OnDriverCIChanging(ref value);
                  ReportPropertyChanging("DriverCI");
                  _DriverCI = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DriverCI");
                  OnDriverCIChanged();
              }
            }
        }
        private string _DriverCI;
        partial void OnGetDriverCI(ref string value);
        partial void OnDriverCIChanging(ref string value);
        partial void OnDriverCIChanged();
    
        /// <summary>
        /// There are no comments for DriverLicence in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string DriverLicence
        {
            get
            {
                string value = _DriverLicence;
                OnGetDriverLicence(ref value);
                return value;
            }
            set
            {
                if (_DriverLicence != value)
                {
                  OnDriverLicenceChanging(ref value);
                  ReportPropertyChanging("DriverLicence");
                  _DriverLicence = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DriverLicence");
                  OnDriverLicenceChanged();
              }
            }
        }
        private string _DriverLicence;
        partial void OnGetDriverLicence(ref string value);
        partial void OnDriverLicenceChanging(ref string value);
        partial void OnDriverLicenceChanged();
    
        /// <summary>
        /// There are no comments for TransCompanyKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int TransCompanyKey
        {
            get
            {
                int value = _TransCompanyKey;
                OnGetTransCompanyKey(ref value);
                return value;
            }
            set
            {
                if (_TransCompanyKey != value)
                {
                  OnTransCompanyKeyChanging(ref value);
                  ReportPropertyChanging("TransCompanyKey");
                  _TransCompanyKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TransCompanyKey");
                  OnTransCompanyKeyChanged();
              }
            }
        }
        private int _TransCompanyKey;
        partial void OnGetTransCompanyKey(ref int value);
        partial void OnTransCompanyKeyChanging(ref int value);
        partial void OnTransCompanyKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for TransportCompany in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportCompany_Driver", "TransportCompany")]
        public virtual TransportCompany TransportCompany
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Driver", "TransportCompany").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Driver", "TransportCompany").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TransportCompany in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TransportCompany> TransportCompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Driver", "TransportCompany");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Driver", "TransportCompany", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Driver", "TransportCompany").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Driver obj = new Driver();
            obj.DriverKey = DriverKey;
            obj.DriverID = DriverID;
            obj.DriverName = DriverName;
            obj.DriverLastName = DriverLastName;
            obj.DriverCI = DriverCI;
            obj.DriverLicence = DriverLicence;
            obj.TransCompanyKey = TransCompanyKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          Driver toCompare = obj as Driver;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.DriverKey, toCompare.DriverKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + DriverKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WarehouseUbication in the schema.
    /// </summary>
    /// <KeyProperties>
    /// WhseUbicationKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WarehouseUbication")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Ubicación")]
    public partial class WarehouseUbication : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new WarehouseUbication object.
        /// </summary>
        /// <param name="whseUbicationKey">Initial value of WhseUbicationKey.</param>
        /// <param name="whseKey">Initial value of WhseKey.</param>
        /// <param name="status">Initial value of Status.</param>
        /// <param name="weight">Initial value of Weight.</param>
        /// <param name="active">Initial value of Active.</param>
        public static WarehouseUbication CreateWarehouseUbication(int whseUbicationKey, int whseKey, short status, decimal weight, bool active)
        {
            WarehouseUbication warehouseUbication = new WarehouseUbication();
            warehouseUbication.WhseUbicationKey = whseUbicationKey;
            warehouseUbication.WhseKey = whseKey;
            warehouseUbication.Status = status;
            warehouseUbication.Weight = weight;
            warehouseUbication.Active = active;
            return warehouseUbication;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for WhseUbicationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int WhseUbicationKey
        {
            get
            {
                int value = _WhseUbicationKey;
                OnGetWhseUbicationKey(ref value);
                return value;
            }
            set
            {
                if (_WhseUbicationKey != value)
                {
                  OnWhseUbicationKeyChanging(ref value);
                  ReportPropertyChanging("WhseUbicationKey");
                  _WhseUbicationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseUbicationKey");
                  OnWhseUbicationKeyChanged();
              }
            }
        }
        private int _WhseUbicationKey;
        partial void OnGetWhseUbicationKey(ref int value);
        partial void OnWhseUbicationKeyChanging(ref int value);
        partial void OnWhseUbicationKeyChanged();
    
        /// <summary>
        /// There are no comments for WhseKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseKey
        {
            get
            {
                int value = _WhseKey;
                OnGetWhseKey(ref value);
                return value;
            }
            set
            {
                if (_WhseKey != value)
                {
                  OnWhseKeyChanging(ref value);
                  ReportPropertyChanging("WhseKey");
                  _WhseKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseKey");
                  OnWhseKeyChanged();
              }
            }
        }
        private int _WhseKey;
        partial void OnGetWhseKey(ref int value);
        partial void OnWhseKeyChanging(ref int value);
        partial void OnWhseKeyChanged();
    
        /// <summary>
        /// There are no comments for UbicationTypeKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? UbicationTypeKey
        {
            get
            {
                int? value = _UbicationTypeKey;
                OnGetUbicationTypeKey(ref value);
                return value;
            }
            set
            {
                if (_UbicationTypeKey != value)
                {
                  OnUbicationTypeKeyChanging(ref value);
                  ReportPropertyChanging("UbicationTypeKey");
                  _UbicationTypeKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("UbicationTypeKey");
                  OnUbicationTypeKeyChanged();
              }
            }
        }
        private int? _UbicationTypeKey;
        partial void OnGetUbicationTypeKey(ref int? value);
        partial void OnUbicationTypeKeyChanging(ref int? value);
        partial void OnUbicationTypeKeyChanged();
    
        /// <summary>
        /// There are no comments for WhseUbicationID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Ubicación")]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Ubicación")]
        public virtual string WhseUbicationID
        {
            get
            {
                string value = _WhseUbicationID;
                OnGetWhseUbicationID(ref value);
                return value;
            }
            set
            {
                if (_WhseUbicationID != value)
                {
                  OnWhseUbicationIDChanging(ref value);
                  ReportPropertyChanging("WhseUbicationID");
                  _WhseUbicationID = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("WhseUbicationID");
                  OnWhseUbicationIDChanged();
              }
            }
        }
        private string _WhseUbicationID;
        partial void OnGetWhseUbicationID(ref string value);
        partial void OnWhseUbicationIDChanging(ref string value);
        partial void OnWhseUbicationIDChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for Rotation in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual short? Rotation
        {
            get
            {
                short? value = _Rotation;
                OnGetRotation(ref value);
                return value;
            }
            set
            {
                if (_Rotation != value)
                {
                  OnRotationChanging(ref value);
                  ReportPropertyChanging("Rotation");
                  _Rotation = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Rotation");
                  OnRotationChanged();
              }
            }
        }
        private short? _Rotation;
        partial void OnGetRotation(ref short? value);
        partial void OnRotationChanging(ref short? value);
        partial void OnRotationChanged();
    
        /// <summary>
        /// There are no comments for Tamarery in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual short? Tamarery
        {
            get
            {
                short? value = _Tamarery;
                OnGetTamarery(ref value);
                return value;
            }
            set
            {
                if (_Tamarery != value)
                {
                  OnTamareryChanging(ref value);
                  ReportPropertyChanging("Tamarery");
                  _Tamarery = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Tamarery");
                  OnTamareryChanged();
              }
            }
        }
        private short? _Tamarery;
        partial void OnGetTamarery(ref short? value);
        partial void OnTamareryChanging(ref short? value);
        partial void OnTamareryChanged();
    
        /// <summary>
        /// There are no comments for BlockStatus in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual short? BlockStatus
        {
            get
            {
                short? value = _BlockStatus;
                OnGetBlockStatus(ref value);
                return value;
            }
            set
            {
                if (_BlockStatus != value)
                {
                  OnBlockStatusChanging(ref value);
                  ReportPropertyChanging("BlockStatus");
                  _BlockStatus = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("BlockStatus");
                  OnBlockStatusChanged();
              }
            }
        }
        private short? _BlockStatus;
        partial void OnGetBlockStatus(ref short? value);
        partial void OnBlockStatusChanging(ref short? value);
        partial void OnBlockStatusChanged();
    
        /// <summary>
        /// There are no comments for PickingKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual short? PickingKey
        {
            get
            {
                short? value = _PickingKey;
                OnGetPickingKey(ref value);
                return value;
            }
            set
            {
                if (_PickingKey != value)
                {
                  OnPickingKeyChanging(ref value);
                  ReportPropertyChanging("PickingKey");
                  _PickingKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PickingKey");
                  OnPickingKeyChanged();
              }
            }
        }
        private short? _PickingKey;
        partial void OnGetPickingKey(ref short? value);
        partial void OnPickingKeyChanging(ref short? value);
        partial void OnPickingKeyChanged();
    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupStaticColumn(@"twmWarehouseUbications", @"Status")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Estado")]
        public virtual short Status
        {
            get
            {
                short value = _Status;
                OnGetStatus(ref value);
                return value;
            }
            set
            {
                if (_Status != value)
                {
                  OnStatusChanging(ref value);
                  ReportPropertyChanging("Status");
                  _Status = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Status");
                  OnStatusChanged();
              }
            }
        }
        private short _Status = 1;
        partial void OnGetStatus(ref short value);
        partial void OnStatusChanging(ref short value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// There are no comments for Weight in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal Weight
        {
            get
            {
                decimal value = _Weight;
                OnGetWeight(ref value);
                return value;
            }
            set
            {
                if (_Weight != value)
                {
                  OnWeightChanging(ref value);
                  ReportPropertyChanging("Weight");
                  _Weight = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Weight");
                  OnWeightChanged();
              }
            }
        }
        private decimal _Weight;
        partial void OnGetWeight(ref decimal value);
        partial void OnWeightChanging(ref decimal value);
        partial void OnWeightChanged();
    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool Active
        {
            get
            {
                bool value = _Active;
                OnGetActive(ref value);
                return value;
            }
            set
            {
                if (_Active != value)
                {
                  OnActiveChanging(ref value);
                  ReportPropertyChanging("Active");
                  _Active = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Active");
                  OnActiveChanged();
              }
            }
        }
        private bool _Active;
        partial void OnGetActive(ref bool value);
        partial void OnActiveChanging(ref bool value);
        partial void OnActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for UbicationType in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "UbicationType_WarehouseUbication", "UbicationType")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Tipo de Ubicación")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        public virtual UbicationType UbicationType
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<UbicationType>("WMDataAccess.Datamodel.UbicationType_WarehouseUbication", "UbicationType").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<UbicationType>("WMDataAccess.Datamodel.UbicationType_WarehouseUbication", "UbicationType").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for UbicationType in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UbicationType> UbicationTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<UbicationType>("WMDataAccess.Datamodel.UbicationType_WarehouseUbication", "UbicationType");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<UbicationType>("WMDataAccess.Datamodel.UbicationType_WarehouseUbication", "UbicationType", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<UbicationType>("WMDataAccess.Datamodel.UbicationType_WarehouseUbication", "UbicationType").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for StoragePatterUbications in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbication_StoragePatterUbication", "StoragePatterUbications")]
        public virtual EntityCollection<StoragePatterUbication> StoragePatterUbications
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<StoragePatterUbication>("WMDataAccess.Datamodel.WarehouseUbication_StoragePatterUbication", "StoragePatterUbications");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<StoragePatterUbication>("WMDataAccess.Datamodel.WarehouseUbication_StoragePatterUbication", "StoragePatterUbications", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for WarehouseUbicationsLog in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbicationsLog")]
        public virtual WarehouseUbicationLog WarehouseUbicationsLog
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbicationLog>("WMDataAccess.Datamodel.WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbicationsLog").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbicationLog>("WMDataAccess.Datamodel.WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbicationsLog").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for WarehouseUbicationsLog in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarehouseUbicationLog> WarehouseUbicationsLogReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbicationLog>("WMDataAccess.Datamodel.WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbicationsLog");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<WarehouseUbicationLog>("WMDataAccess.Datamodel.WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbicationsLog", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbicationLog>("WMDataAccess.Datamodel.WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbicationsLog").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for PickingArea in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "PickingArea_WarehouseUbication", "PickingArea")]
        public virtual PickingArea PickingArea
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PickingArea>("WMDataAccess.Datamodel.PickingArea_WarehouseUbication", "PickingArea").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PickingArea>("WMDataAccess.Datamodel.PickingArea_WarehouseUbication", "PickingArea").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for PickingArea in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PickingArea> PickingAreaReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PickingArea>("WMDataAccess.Datamodel.PickingArea_WarehouseUbication", "PickingArea");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<PickingArea>("WMDataAccess.Datamodel.PickingArea_WarehouseUbication", "PickingArea", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PickingArea>("WMDataAccess.Datamodel.PickingArea_WarehouseUbication", "PickingArea").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Gates in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbication_Gate", "Gates")]
        public virtual EntityCollection<Gate> Gates
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Gate>("WMDataAccess.Datamodel.WarehouseUbication_Gate", "Gates");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Gate>("WMDataAccess.Datamodel.WarehouseUbication_Gate", "Gates", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            WarehouseUbication obj = new WarehouseUbication();
            obj.WhseUbicationKey = WhseUbicationKey;
            obj.WhseKey = WhseKey;
            obj.UbicationTypeKey = UbicationTypeKey;
            obj.WhseUbicationID = WhseUbicationID;
            obj.CompanyID = CompanyID;
            obj.Rotation = Rotation;
            obj.Tamarery = Tamarery;
            obj.BlockStatus = BlockStatus;
            obj.PickingKey = PickingKey;
            obj.Status = Status;
            obj.Weight = Weight;
            obj.Active = Active;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          WarehouseUbication toCompare = obj as WarehouseUbication;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.WhseUbicationKey, toCompare.WhseUbicationKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + WhseUbicationKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.Gate in the schema.
    /// </summary>
    /// <KeyProperties>
    /// GateKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="Gate")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Puerta")]
    public partial class Gate : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new Gate object.
        /// </summary>
        /// <param name="gateKey">Initial value of GateKey.</param>
        /// <param name="gateID">Initial value of GateID.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <param name="description">Initial value of Description.</param>
        /// <param name="type">Initial value of Type.</param>
        /// <param name="whseKey">Initial value of WhseKey.</param>
        /// <param name="active">Initial value of Active.</param>
        /// <param name="whseUbicationKey">Initial value of WhseUbicationKey.</param>
        public static Gate CreateGate(int gateKey, string gateID, string companyID, string description, short type, int whseKey, bool active, int whseUbicationKey)
        {
            Gate gate = new Gate();
            gate.GateKey = gateKey;
            gate.GateID = gateID;
            gate.CompanyID = companyID;
            gate.Description = description;
            gate.Type = type;
            gate.WhseKey = whseKey;
            gate.Active = active;
            gate.WhseUbicationKey = whseUbicationKey;
            return gate;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for GateKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int GateKey
        {
            get
            {
                int value = _GateKey;
                OnGetGateKey(ref value);
                return value;
            }
            set
            {
                if (_GateKey != value)
                {
                  OnGateKeyChanging(ref value);
                  ReportPropertyChanging("GateKey");
                  _GateKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("GateKey");
                  OnGateKeyChanged();
              }
            }
        }
        private int _GateKey;
        partial void OnGetGateKey(ref int value);
        partial void OnGateKeyChanging(ref int value);
        partial void OnGateKeyChanged();
    
        /// <summary>
        /// There are no comments for GateID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Puerta")]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Puerta")]
        public virtual string GateID
        {
            get
            {
                string value = _GateID;
                OnGetGateID(ref value);
                return value;
            }
            set
            {
                if (_GateID != value)
                {
                  OnGateIDChanging(ref value);
                  ReportPropertyChanging("GateID");
                  _GateID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("GateID");
                  OnGateIDChanged();
              }
            }
        }
        private string _GateID;
        partial void OnGetGateID(ref string value);
        partial void OnGateIDChanging(ref string value);
        partial void OnGateIDChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Descripción")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Descripción")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Tipo")]
        [Net4Sage.Controls.Lookup.LookupStaticColumn(@"twmGates", @"Type")]
        public virtual short Type
        {
            get
            {
                short value = _Type;
                OnGetType(ref value);
                return value;
            }
            set
            {
                if (_Type != value)
                {
                  OnTypeChanging(ref value);
                  ReportPropertyChanging("Type");
                  _Type = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Type");
                  OnTypeChanged();
              }
            }
        }
        private short _Type;
        partial void OnGetType(ref short value);
        partial void OnTypeChanging(ref short value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// There are no comments for WhseKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseKey
        {
            get
            {
                int value = _WhseKey;
                OnGetWhseKey(ref value);
                return value;
            }
            set
            {
                if (_WhseKey != value)
                {
                  OnWhseKeyChanging(ref value);
                  ReportPropertyChanging("WhseKey");
                  _WhseKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseKey");
                  OnWhseKeyChanged();
              }
            }
        }
        private int _WhseKey;
        partial void OnGetWhseKey(ref int value);
        partial void OnWhseKeyChanging(ref int value);
        partial void OnWhseKeyChanged();
    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool Active
        {
            get
            {
                bool value = _Active;
                OnGetActive(ref value);
                return value;
            }
            set
            {
                if (_Active != value)
                {
                  OnActiveChanging(ref value);
                  ReportPropertyChanging("Active");
                  _Active = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Active");
                  OnActiveChanged();
              }
            }
        }
        private bool _Active;
        partial void OnGetActive(ref bool value);
        partial void OnActiveChanging(ref bool value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// There are no comments for WhseUbicationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseUbicationKey
        {
            get
            {
                int value = _WhseUbicationKey;
                OnGetWhseUbicationKey(ref value);
                return value;
            }
            set
            {
                if (_WhseUbicationKey != value)
                {
                  OnWhseUbicationKeyChanging(ref value);
                  ReportPropertyChanging("WhseUbicationKey");
                  _WhseUbicationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseUbicationKey");
                  OnWhseUbicationKeyChanged();
              }
            }
        }
        private int _WhseUbicationKey;
        partial void OnGetWhseUbicationKey(ref int value);
        partial void OnWhseUbicationKeyChanging(ref int value);
        partial void OnWhseUbicationKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for WarehouseUbication in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbication_Gate", "WarehouseUbication")]
        public virtual WarehouseUbication WarehouseUbication
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_Gate", "WarehouseUbication").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_Gate", "WarehouseUbication").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for WarehouseUbication in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarehouseUbication> WarehouseUbicationReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_Gate", "WarehouseUbication");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_Gate", "WarehouseUbication", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_Gate", "WarehouseUbication").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Gate obj = new Gate();
            obj.GateKey = GateKey;
            obj.GateID = GateID;
            obj.CompanyID = CompanyID;
            obj.Description = Description;
            obj.Type = Type;
            obj.WhseKey = WhseKey;
            obj.Active = Active;
            obj.WhseUbicationKey = WhseUbicationKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          Gate toCompare = obj as Gate;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.GateKey, toCompare.GateKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + GateKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.StoragePattern in the schema.
    /// </summary>
    /// <KeyProperties>
    /// StrgPatternKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="StoragePattern")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Estrategía de Almacenamiento")]
    public partial class StoragePattern : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new StoragePattern object.
        /// </summary>
        /// <param name="strgPatternKey">Initial value of StrgPatternKey.</param>
        /// <param name="strgPatternID">Initial value of StrgPatternID.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <param name="whseKey">Initial value of WhseKey.</param>
        public static StoragePattern CreateStoragePattern(int strgPatternKey, string strgPatternID, string companyID, int whseKey)
        {
            StoragePattern storagePattern = new StoragePattern();
            storagePattern.StrgPatternKey = strgPatternKey;
            storagePattern.StrgPatternID = strgPatternID;
            storagePattern.CompanyID = companyID;
            storagePattern.WhseKey = whseKey;
            return storagePattern;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for StrgPatternKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int StrgPatternKey
        {
            get
            {
                int value = _StrgPatternKey;
                OnGetStrgPatternKey(ref value);
                return value;
            }
            set
            {
                if (_StrgPatternKey != value)
                {
                  OnStrgPatternKeyChanging(ref value);
                  ReportPropertyChanging("StrgPatternKey");
                  _StrgPatternKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("StrgPatternKey");
                  OnStrgPatternKeyChanged();
              }
            }
        }
        private int _StrgPatternKey;
        partial void OnGetStrgPatternKey(ref int value);
        partial void OnStrgPatternKeyChanging(ref int value);
        partial void OnStrgPatternKeyChanged();
    
        /// <summary>
        /// There are no comments for StrgPatternID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Estrategía")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Estrategía")]
        public virtual string StrgPatternID
        {
            get
            {
                string value = _StrgPatternID;
                OnGetStrgPatternID(ref value);
                return value;
            }
            set
            {
                if (_StrgPatternID != value)
                {
                  OnStrgPatternIDChanging(ref value);
                  ReportPropertyChanging("StrgPatternID");
                  _StrgPatternID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("StrgPatternID");
                  OnStrgPatternIDChanged();
              }
            }
        }
        private string _StrgPatternID;
        partial void OnGetStrgPatternID(ref string value);
        partial void OnStrgPatternIDChanging(ref string value);
        partial void OnStrgPatternIDChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for WhseKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseKey
        {
            get
            {
                int value = _WhseKey;
                OnGetWhseKey(ref value);
                return value;
            }
            set
            {
                if (_WhseKey != value)
                {
                  OnWhseKeyChanging(ref value);
                  ReportPropertyChanging("WhseKey");
                  _WhseKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseKey");
                  OnWhseKeyChanged();
              }
            }
        }
        private int _WhseKey;
        partial void OnGetWhseKey(ref int value);
        partial void OnWhseKeyChanging(ref int value);
        partial void OnWhseKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for StoragePatterUbications in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "StoragePattern_StoragePatterUbication", "StoragePatterUbications")]
        public virtual EntityCollection<StoragePatterUbication> StoragePatterUbications
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<StoragePatterUbication>("WMDataAccess.Datamodel.StoragePattern_StoragePatterUbication", "StoragePatterUbications");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<StoragePatterUbication>("WMDataAccess.Datamodel.StoragePattern_StoragePatterUbication", "StoragePatterUbications", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for WMSInventaries in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "StoragePattern_WMSInventary", "WMSInventaries")]
        public virtual EntityCollection<WMSInventary> WMSInventaries
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<WMSInventary>("WMDataAccess.Datamodel.StoragePattern_WMSInventary", "WMSInventaries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<WMSInventary>("WMDataAccess.Datamodel.StoragePattern_WMSInventary", "WMSInventaries", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            StoragePattern obj = new StoragePattern();
            obj.StrgPatternKey = StrgPatternKey;
            obj.StrgPatternID = StrgPatternID;
            obj.CompanyID = CompanyID;
            obj.WhseKey = WhseKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          StoragePattern toCompare = obj as StoragePattern;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.StrgPatternKey, toCompare.StrgPatternKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + StrgPatternKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.StoragePatterUbication in the schema.
    /// </summary>
    /// <KeyProperties>
    /// StrgPatternKey
    /// WhseUbicationKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="StoragePatterUbication")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StoragePatterUbication : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new StoragePatterUbication object.
        /// </summary>
        /// <param name="no">Initial value of No.</param>
        /// <param name="strgPatternKey">Initial value of StrgPatternKey.</param>
        /// <param name="whseUbicationKey">Initial value of WhseUbicationKey.</param>
        public static StoragePatterUbication CreateStoragePatterUbication(int no, int strgPatternKey, int whseUbicationKey)
        {
            StoragePatterUbication storagePatterUbication = new StoragePatterUbication();
            storagePatterUbication.No = no;
            storagePatterUbication.StrgPatternKey = strgPatternKey;
            storagePatterUbication.WhseUbicationKey = whseUbicationKey;
            return storagePatterUbication;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for No in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int No
        {
            get
            {
                int value = _No;
                OnGetNo(ref value);
                return value;
            }
            set
            {
                if (_No != value)
                {
                  OnNoChanging(ref value);
                  ReportPropertyChanging("No");
                  _No = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("No");
                  OnNoChanged();
              }
            }
        }
        private int _No;
        partial void OnGetNo(ref int value);
        partial void OnNoChanging(ref int value);
        partial void OnNoChanged();
    
        /// <summary>
        /// There are no comments for StrgPatternKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int StrgPatternKey
        {
            get
            {
                int value = _StrgPatternKey;
                OnGetStrgPatternKey(ref value);
                return value;
            }
            set
            {
                if (_StrgPatternKey != value)
                {
                  OnStrgPatternKeyChanging(ref value);
                  ReportPropertyChanging("StrgPatternKey");
                  _StrgPatternKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("StrgPatternKey");
                  OnStrgPatternKeyChanged();
              }
            }
        }
        private int _StrgPatternKey;
        partial void OnGetStrgPatternKey(ref int value);
        partial void OnStrgPatternKeyChanging(ref int value);
        partial void OnStrgPatternKeyChanged();
    
        /// <summary>
        /// There are no comments for WhseUbicationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseUbicationKey
        {
            get
            {
                int value = _WhseUbicationKey;
                OnGetWhseUbicationKey(ref value);
                return value;
            }
            set
            {
                if (_WhseUbicationKey != value)
                {
                  OnWhseUbicationKeyChanging(ref value);
                  ReportPropertyChanging("WhseUbicationKey");
                  _WhseUbicationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseUbicationKey");
                  OnWhseUbicationKeyChanged();
              }
            }
        }
        private int _WhseUbicationKey;
        partial void OnGetWhseUbicationKey(ref int value);
        partial void OnWhseUbicationKeyChanging(ref int value);
        partial void OnWhseUbicationKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for StoragePattern in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "StoragePattern_StoragePatterUbication", "StoragePattern")]
        public virtual StoragePattern StoragePattern
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StoragePattern>("WMDataAccess.Datamodel.StoragePattern_StoragePatterUbication", "StoragePattern").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StoragePattern>("WMDataAccess.Datamodel.StoragePattern_StoragePatterUbication", "StoragePattern").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for StoragePattern in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StoragePattern> StoragePatternReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StoragePattern>("WMDataAccess.Datamodel.StoragePattern_StoragePatterUbication", "StoragePattern");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<StoragePattern>("WMDataAccess.Datamodel.StoragePattern_StoragePatterUbication", "StoragePattern", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StoragePattern>("WMDataAccess.Datamodel.StoragePattern_StoragePatterUbication", "StoragePattern").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for WarehouseUbication in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbication_StoragePatterUbication", "WarehouseUbication")]
        public virtual WarehouseUbication WarehouseUbication
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_StoragePatterUbication", "WarehouseUbication").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_StoragePatterUbication", "WarehouseUbication").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for WarehouseUbication in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarehouseUbication> WarehouseUbicationReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_StoragePatterUbication", "WarehouseUbication");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_StoragePatterUbication", "WarehouseUbication", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_StoragePatterUbication", "WarehouseUbication").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            StoragePatterUbication obj = new StoragePatterUbication();
            obj.No = No;
            obj.StrgPatternKey = StrgPatternKey;
            obj.WhseUbicationKey = WhseUbicationKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          StoragePatterUbication toCompare = obj as StoragePatterUbication;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.StrgPatternKey, toCompare.StrgPatternKey))
            return false;
          if (!Object.Equals(this.WhseUbicationKey, toCompare.WhseUbicationKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + StrgPatternKey.GetHashCode();
          hashCode = (hashCode * 7) + WhseUbicationKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WarehouseUbicationLog in the schema.
    /// </summary>
    /// <KeyProperties>
    /// WhseUbicationKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WarehouseUbicationLog")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WarehouseUbicationLog : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new WarehouseUbicationLog object.
        /// </summary>
        /// <param name="whseUbicationKey">Initial value of WhseUbicationKey.</param>
        public static WarehouseUbicationLog CreateWarehouseUbicationLog(int whseUbicationKey)
        {
            WarehouseUbicationLog warehouseUbicationLog = new WarehouseUbicationLog();
            warehouseUbicationLog.WhseUbicationKey = whseUbicationKey;
            return warehouseUbicationLog;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for WhseUbicationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseUbicationKey
        {
            get
            {
                int value = _WhseUbicationKey;
                OnGetWhseUbicationKey(ref value);
                return value;
            }
            set
            {
                if (_WhseUbicationKey != value)
                {
                  OnWhseUbicationKeyChanging(ref value);
                  ReportPropertyChanging("WhseUbicationKey");
                  _WhseUbicationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseUbicationKey");
                  OnWhseUbicationKeyChanged();
              }
            }
        }
        private int _WhseUbicationKey;
        partial void OnGetWhseUbicationKey(ref int value);
        partial void OnWhseUbicationKeyChanging(ref int value);
        partial void OnWhseUbicationKeyChanged();
    
        /// <summary>
        /// There are no comments for ItemKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? ItemKey
        {
            get
            {
                int? value = _ItemKey;
                OnGetItemKey(ref value);
                return value;
            }
            set
            {
                if (_ItemKey != value)
                {
                  OnItemKeyChanging(ref value);
                  ReportPropertyChanging("ItemKey");
                  _ItemKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ItemKey");
                  OnItemKeyChanged();
              }
            }
        }
        private int? _ItemKey;
        partial void OnGetItemKey(ref int? value);
        partial void OnItemKeyChanging(ref int? value);
        partial void OnItemKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for WarehouseUbication in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbication")]
        public virtual WarehouseUbication WarehouseUbication
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbication").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbication").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for WarehouseUbication in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarehouseUbication> WarehouseUbicationReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbication");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbication", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WarehouseUbicationsLog", "WarehouseUbication").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for WarehouseUbicationLogLevels in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbicationLog_WarehouseUbicationLogLevel", "WarehouseUbicationLogLevels")]
        public virtual EntityCollection<WarehouseUbicationLogLevel> WarehouseUbicationLogLevels
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<WarehouseUbicationLogLevel>("WMDataAccess.Datamodel.WarehouseUbicationLog_WarehouseUbicationLogLevel", "WarehouseUbicationLogLevels");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<WarehouseUbicationLogLevel>("WMDataAccess.Datamodel.WarehouseUbicationLog_WarehouseUbicationLogLevel", "WarehouseUbicationLogLevels", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            WarehouseUbicationLog obj = new WarehouseUbicationLog();
            obj.WhseUbicationKey = WhseUbicationKey;
            obj.ItemKey = ItemKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          WarehouseUbicationLog toCompare = obj as WarehouseUbicationLog;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.WhseUbicationKey, toCompare.WhseUbicationKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + WhseUbicationKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WorkOrder in the schema.
    /// </summary>
    /// <KeyProperties>
    /// WorkOrderKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WorkOrder")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Orden de Trabajo")]
    public partial class WorkOrder : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new WorkOrder object.
        /// </summary>
        /// <param name="workOrderKey">Initial value of WorkOrderKey.</param>
        /// <param name="workOrderID">Initial value of WorkOrderID.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <param name="type">Initial value of Type.</param>
        /// <param name="whseKey">Initial value of WhseKey.</param>
        /// <param name="date">Initial value of Date.</param>
        /// <param name="status">Initial value of Status.</param>
        public static WorkOrder CreateWorkOrder(int workOrderKey, string workOrderID, string companyID, short type, int whseKey, global::System.DateTime date, short status)
        {
            WorkOrder workOrder = new WorkOrder();
            workOrder.WorkOrderKey = workOrderKey;
            workOrder.WorkOrderID = workOrderID;
            workOrder.CompanyID = companyID;
            workOrder.Type = type;
            workOrder.WhseKey = whseKey;
            workOrder.Date = date;
            workOrder.Status = status;
            return workOrder;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for WorkOrderKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int WorkOrderKey
        {
            get
            {
                int value = _WorkOrderKey;
                OnGetWorkOrderKey(ref value);
                return value;
            }
            set
            {
                if (_WorkOrderKey != value)
                {
                  OnWorkOrderKeyChanging(ref value);
                  ReportPropertyChanging("WorkOrderKey");
                  _WorkOrderKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WorkOrderKey");
                  OnWorkOrderKeyChanged();
              }
            }
        }
        private int _WorkOrderKey;
        partial void OnGetWorkOrderKey(ref int value);
        partial void OnWorkOrderKeyChanging(ref int value);
        partial void OnWorkOrderKeyChanged();
    
        /// <summary>
        /// There are no comments for WorkOrderID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Orden de Trabajo")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Orden de Trabajo")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        public virtual string WorkOrderID
        {
            get
            {
                string value = _WorkOrderID;
                OnGetWorkOrderID(ref value);
                return value;
            }
            set
            {
                if (_WorkOrderID != value)
                {
                  OnWorkOrderIDChanging(ref value);
                  ReportPropertyChanging("WorkOrderID");
                  _WorkOrderID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("WorkOrderID");
                  OnWorkOrderIDChanged();
              }
            }
        }
        private string _WorkOrderID;
        partial void OnGetWorkOrderID(ref string value);
        partial void OnWorkOrderIDChanging(ref string value);
        partial void OnWorkOrderIDChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Tipo de Orden")]
        [Net4Sage.Controls.Lookup.LookupStaticColumn(@"twmWorkOrders", @"Type")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        public virtual short Type
        {
            get
            {
                short value = _Type;
                OnGetType(ref value);
                return value;
            }
            set
            {
                if (_Type != value)
                {
                  OnTypeChanging(ref value);
                  ReportPropertyChanging("Type");
                  _Type = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Type");
                  OnTypeChanged();
              }
            }
        }
        private short _Type = 1;
        partial void OnGetType(ref short value);
        partial void OnTypeChanging(ref short value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// There are no comments for WhseKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseKey
        {
            get
            {
                int value = _WhseKey;
                OnGetWhseKey(ref value);
                return value;
            }
            set
            {
                if (_WhseKey != value)
                {
                  OnWhseKeyChanging(ref value);
                  ReportPropertyChanging("WhseKey");
                  _WhseKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseKey");
                  OnWhseKeyChanged();
              }
            }
        }
        private int _WhseKey;
        partial void OnGetWhseKey(ref int value);
        partial void OnWhseKeyChanging(ref int value);
        partial void OnWhseKeyChanged();
    
        /// <summary>
        /// There are no comments for FromUbicationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? FromUbicationKey
        {
            get
            {
                int? value = _FromUbicationKey;
                OnGetFromUbicationKey(ref value);
                return value;
            }
            set
            {
                if (_FromUbicationKey != value)
                {
                  OnFromUbicationKeyChanging(ref value);
                  ReportPropertyChanging("FromUbicationKey");
                  _FromUbicationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("FromUbicationKey");
                  OnFromUbicationKeyChanged();
              }
            }
        }
        private int? _FromUbicationKey;
        partial void OnGetFromUbicationKey(ref int? value);
        partial void OnFromUbicationKeyChanging(ref int? value);
        partial void OnFromUbicationKeyChanged();
    
        /// <summary>
        /// There are no comments for ToUbicationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? ToUbicationKey
        {
            get
            {
                int? value = _ToUbicationKey;
                OnGetToUbicationKey(ref value);
                return value;
            }
            set
            {
                if (_ToUbicationKey != value)
                {
                  OnToUbicationKeyChanging(ref value);
                  ReportPropertyChanging("ToUbicationKey");
                  _ToUbicationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ToUbicationKey");
                  OnToUbicationKeyChanged();
              }
            }
        }
        private int? _ToUbicationKey;
        partial void OnGetToUbicationKey(ref int? value);
        partial void OnToUbicationKeyChanging(ref int? value);
        partial void OnToUbicationKeyChanged();
    
        /// <summary>
        /// There are no comments for Date in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Fecha")]
        public virtual global::System.DateTime Date
        {
            get
            {
                global::System.DateTime value = _Date;
                OnGetDate(ref value);
                return value;
            }
            set
            {
                if (_Date != value)
                {
                  OnDateChanging(ref value);
                  ReportPropertyChanging("Date");
                  _Date = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Date");
                  OnDateChanged();
              }
            }
        }
        private global::System.DateTime _Date;
        partial void OnGetDate(ref global::System.DateTime value);
        partial void OnDateChanging(ref global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// There are no comments for SourceKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? SourceKey
        {
            get
            {
                int? value = _SourceKey;
                OnGetSourceKey(ref value);
                return value;
            }
            set
            {
                if (_SourceKey != value)
                {
                  OnSourceKeyChanging(ref value);
                  ReportPropertyChanging("SourceKey");
                  _SourceKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("SourceKey");
                  OnSourceKeyChanged();
              }
            }
        }
        private int? _SourceKey;
        partial void OnGetSourceKey(ref int? value);
        partial void OnSourceKeyChanging(ref int? value);
        partial void OnSourceKeyChanged();
    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupStaticColumn(@"twmWorkOrders", @"Status")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Estado")]
        public virtual short Status
        {
            get
            {
                short value = _Status;
                OnGetStatus(ref value);
                return value;
            }
            set
            {
                if (_Status != value)
                {
                  OnStatusChanging(ref value);
                  ReportPropertyChanging("Status");
                  _Status = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Status");
                  OnStatusChanged();
              }
            }
        }
        private short _Status = 1;
        partial void OnGetStatus(ref short value);
        partial void OnStatusChanging(ref short value);
        partial void OnStatusChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for WorkOrderLines in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WorkOrder_WorkOrderLine", "WorkOrderLines")]
        public virtual EntityCollection<WorkOrderLine> WorkOrderLines
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<WorkOrderLine>("WMDataAccess.Datamodel.WorkOrder_WorkOrderLine", "WorkOrderLines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<WorkOrderLine>("WMDataAccess.Datamodel.WorkOrder_WorkOrderLine", "WorkOrderLines", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for From in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WorkOrder", "From")]
        public virtual WarehouseUbication From
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrder", "From").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrder", "From").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for From in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarehouseUbication> FromReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrder", "From");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrder", "From", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrder", "From").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for To in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WorkOrder1", "To")]
        public virtual WarehouseUbication To
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrder1", "To").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrder1", "To").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for To in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarehouseUbication> ToReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrder1", "To");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrder1", "To", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrder1", "To").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            WorkOrder obj = new WorkOrder();
            obj.WorkOrderKey = WorkOrderKey;
            obj.WorkOrderID = WorkOrderID;
            obj.CompanyID = CompanyID;
            obj.Type = Type;
            obj.WhseKey = WhseKey;
            obj.FromUbicationKey = FromUbicationKey;
            obj.ToUbicationKey = ToUbicationKey;
            obj.Date = Date;
            obj.SourceKey = SourceKey;
            obj.Status = Status;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          WorkOrder toCompare = obj as WorkOrder;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.WorkOrderKey, toCompare.WorkOrderKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + WorkOrderKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WorkOrderLine in the schema.
    /// </summary>
    /// <KeyProperties>
    /// WOLineKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WorkOrderLine")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WorkOrderLine : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new WorkOrderLine object.
        /// </summary>
        /// <param name="wOLineKey">Initial value of WOLineKey.</param>
        /// <param name="itemKey">Initial value of ItemKey.</param>
        /// <param name="workOrderKey">Initial value of WorkOrderKey.</param>
        /// <param name="qty">Initial value of Qty.</param>
        /// <param name="lineNo">Initial value of LineNo.</param>
        /// <param name="status">Initial value of Status.</param>
        /// <param name="lPNKey">Initial value of LPNKey.</param>
        public static WorkOrderLine CreateWorkOrderLine(int wOLineKey, int itemKey, int workOrderKey, decimal qty, int lineNo, short status, int lPNKey)
        {
            WorkOrderLine workOrderLine = new WorkOrderLine();
            workOrderLine.WOLineKey = wOLineKey;
            workOrderLine.ItemKey = itemKey;
            workOrderLine.WorkOrderKey = workOrderKey;
            workOrderLine.Qty = qty;
            workOrderLine.LineNo = lineNo;
            workOrderLine.Status = status;
            workOrderLine.LPNKey = lPNKey;
            return workOrderLine;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for WOLineKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WOLineKey
        {
            get
            {
                int value = _WOLineKey;
                OnGetWOLineKey(ref value);
                return value;
            }
            set
            {
                if (_WOLineKey != value)
                {
                  OnWOLineKeyChanging(ref value);
                  ReportPropertyChanging("WOLineKey");
                  _WOLineKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WOLineKey");
                  OnWOLineKeyChanged();
              }
            }
        }
        private int _WOLineKey;
        partial void OnGetWOLineKey(ref int value);
        partial void OnWOLineKeyChanging(ref int value);
        partial void OnWOLineKeyChanged();
    
        /// <summary>
        /// There are no comments for ItemKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int ItemKey
        {
            get
            {
                int value = _ItemKey;
                OnGetItemKey(ref value);
                return value;
            }
            set
            {
                if (_ItemKey != value)
                {
                  OnItemKeyChanging(ref value);
                  ReportPropertyChanging("ItemKey");
                  _ItemKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ItemKey");
                  OnItemKeyChanged();
              }
            }
        }
        private int _ItemKey;
        partial void OnGetItemKey(ref int value);
        partial void OnItemKeyChanging(ref int value);
        partial void OnItemKeyChanged();
    
        /// <summary>
        /// There are no comments for WorkOrderKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WorkOrderKey
        {
            get
            {
                int value = _WorkOrderKey;
                OnGetWorkOrderKey(ref value);
                return value;
            }
            set
            {
                if (_WorkOrderKey != value)
                {
                  OnWorkOrderKeyChanging(ref value);
                  ReportPropertyChanging("WorkOrderKey");
                  _WorkOrderKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WorkOrderKey");
                  OnWorkOrderKeyChanged();
              }
            }
        }
        private int _WorkOrderKey;
        partial void OnGetWorkOrderKey(ref int value);
        partial void OnWorkOrderKeyChanging(ref int value);
        partial void OnWorkOrderKeyChanged();
    
        /// <summary>
        /// There are no comments for Qty in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal Qty
        {
            get
            {
                decimal value = _Qty;
                OnGetQty(ref value);
                return value;
            }
            set
            {
                if (_Qty != value)
                {
                  OnQtyChanging(ref value);
                  ReportPropertyChanging("Qty");
                  _Qty = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Qty");
                  OnQtyChanged();
              }
            }
        }
        private decimal _Qty;
        partial void OnGetQty(ref decimal value);
        partial void OnQtyChanging(ref decimal value);
        partial void OnQtyChanged();
    
        /// <summary>
        /// There are no comments for SourceKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? SourceKey
        {
            get
            {
                int? value = _SourceKey;
                OnGetSourceKey(ref value);
                return value;
            }
            set
            {
                if (_SourceKey != value)
                {
                  OnSourceKeyChanging(ref value);
                  ReportPropertyChanging("SourceKey");
                  _SourceKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("SourceKey");
                  OnSourceKeyChanged();
              }
            }
        }
        private int? _SourceKey;
        partial void OnGetSourceKey(ref int? value);
        partial void OnSourceKeyChanging(ref int? value);
        partial void OnSourceKeyChanged();
    
        /// <summary>
        /// There are no comments for LineNo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int LineNo
        {
            get
            {
                int value = _LineNo;
                OnGetLineNo(ref value);
                return value;
            }
            set
            {
                if (_LineNo != value)
                {
                  OnLineNoChanging(ref value);
                  ReportPropertyChanging("LineNo");
                  _LineNo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LineNo");
                  OnLineNoChanged();
              }
            }
        }
        private int _LineNo;
        partial void OnGetLineNo(ref int value);
        partial void OnLineNoChanging(ref int value);
        partial void OnLineNoChanged();
    
        /// <summary>
        /// There are no comments for FromWhseUbicationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? FromWhseUbicationKey
        {
            get
            {
                int? value = _FromWhseUbicationKey;
                OnGetFromWhseUbicationKey(ref value);
                return value;
            }
            set
            {
                if (_FromWhseUbicationKey != value)
                {
                  OnFromWhseUbicationKeyChanging(ref value);
                  ReportPropertyChanging("FromWhseUbicationKey");
                  _FromWhseUbicationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("FromWhseUbicationKey");
                  OnFromWhseUbicationKeyChanged();
              }
            }
        }
        private int? _FromWhseUbicationKey;
        partial void OnGetFromWhseUbicationKey(ref int? value);
        partial void OnFromWhseUbicationKeyChanging(ref int? value);
        partial void OnFromWhseUbicationKeyChanged();
    
        /// <summary>
        /// There are no comments for ToWhseUbicationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? ToWhseUbicationKey
        {
            get
            {
                int? value = _ToWhseUbicationKey;
                OnGetToWhseUbicationKey(ref value);
                return value;
            }
            set
            {
                if (_ToWhseUbicationKey != value)
                {
                  OnToWhseUbicationKeyChanging(ref value);
                  ReportPropertyChanging("ToWhseUbicationKey");
                  _ToWhseUbicationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ToWhseUbicationKey");
                  OnToWhseUbicationKeyChanged();
              }
            }
        }
        private int? _ToWhseUbicationKey;
        partial void OnGetToWhseUbicationKey(ref int? value);
        partial void OnToWhseUbicationKeyChanging(ref int? value);
        partial void OnToWhseUbicationKeyChanged();
    
        /// <summary>
        /// There are no comments for InvtLotKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? InvtLotKey
        {
            get
            {
                int? value = _InvtLotKey;
                OnGetInvtLotKey(ref value);
                return value;
            }
            set
            {
                if (_InvtLotKey != value)
                {
                  OnInvtLotKeyChanging(ref value);
                  ReportPropertyChanging("InvtLotKey");
                  _InvtLotKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("InvtLotKey");
                  OnInvtLotKeyChanged();
              }
            }
        }
        private int? _InvtLotKey;
        partial void OnGetInvtLotKey(ref int? value);
        partial void OnInvtLotKeyChanging(ref int? value);
        partial void OnInvtLotKeyChanged();
    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short Status
        {
            get
            {
                short value = _Status;
                OnGetStatus(ref value);
                return value;
            }
            set
            {
                if (_Status != value)
                {
                  OnStatusChanging(ref value);
                  ReportPropertyChanging("Status");
                  _Status = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Status");
                  OnStatusChanged();
              }
            }
        }
        private short _Status = 1;
        partial void OnGetStatus(ref short value);
        partial void OnStatusChanging(ref short value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// There are no comments for LPNKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int LPNKey
        {
            get
            {
                int value = _LPNKey;
                OnGetLPNKey(ref value);
                return value;
            }
            set
            {
                if (_LPNKey != value)
                {
                  OnLPNKeyChanging(ref value);
                  ReportPropertyChanging("LPNKey");
                  _LPNKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LPNKey");
                  OnLPNKeyChanged();
              }
            }
        }
        private int _LPNKey;
        partial void OnGetLPNKey(ref int value);
        partial void OnLPNKeyChanging(ref int value);
        partial void OnLPNKeyChanged();
    
        /// <summary>
        /// There are no comments for CompleteDate in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.DateTime? CompleteDate
        {
            get
            {
                global::System.DateTime? value = _CompleteDate;
                OnGetCompleteDate(ref value);
                return value;
            }
            set
            {
                if (_CompleteDate != value)
                {
                  OnCompleteDateChanging(ref value);
                  ReportPropertyChanging("CompleteDate");
                  _CompleteDate = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CompleteDate");
                  OnCompleteDateChanged();
              }
            }
        }
        private global::System.DateTime? _CompleteDate;
        partial void OnGetCompleteDate(ref global::System.DateTime? value);
        partial void OnCompleteDateChanging(ref global::System.DateTime? value);
        partial void OnCompleteDateChanged();
    
        /// <summary>
        /// There are no comments for FromLevelNo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? FromLevelNo
        {
            get
            {
                int? value = _FromLevelNo;
                OnGetFromLevelNo(ref value);
                return value;
            }
            set
            {
                if (_FromLevelNo != value)
                {
                  OnFromLevelNoChanging(ref value);
                  ReportPropertyChanging("FromLevelNo");
                  _FromLevelNo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("FromLevelNo");
                  OnFromLevelNoChanged();
              }
            }
        }
        private int? _FromLevelNo;
        partial void OnGetFromLevelNo(ref int? value);
        partial void OnFromLevelNoChanging(ref int? value);
        partial void OnFromLevelNoChanged();
    
        /// <summary>
        /// There are no comments for ToLevelNo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? ToLevelNo
        {
            get
            {
                int? value = _ToLevelNo;
                OnGetToLevelNo(ref value);
                return value;
            }
            set
            {
                if (_ToLevelNo != value)
                {
                  OnToLevelNoChanging(ref value);
                  ReportPropertyChanging("ToLevelNo");
                  _ToLevelNo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ToLevelNo");
                  OnToLevelNoChanged();
              }
            }
        }
        private int? _ToLevelNo;
        partial void OnGetToLevelNo(ref int? value);
        partial void OnToLevelNoChanging(ref int? value);
        partial void OnToLevelNoChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for WorkOrder in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WorkOrder_WorkOrderLine", "WorkOrder")]
        public virtual WorkOrder WorkOrder
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WorkOrder>("WMDataAccess.Datamodel.WorkOrder_WorkOrderLine", "WorkOrder").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WorkOrder>("WMDataAccess.Datamodel.WorkOrder_WorkOrderLine", "WorkOrder").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for WorkOrder in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WorkOrder> WorkOrderReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WorkOrder>("WMDataAccess.Datamodel.WorkOrder_WorkOrderLine", "WorkOrder");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<WorkOrder>("WMDataAccess.Datamodel.WorkOrder_WorkOrderLine", "WorkOrder", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WorkOrder>("WMDataAccess.Datamodel.WorkOrder_WorkOrderLine", "WorkOrder").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for LPN in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "LPNRelation_WorkOrderLine", "LPN")]
        public virtual LPNRelation LPN
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_WorkOrderLine", "LPN").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_WorkOrderLine", "LPN").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for LPN in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<LPNRelation> LPNReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_WorkOrderLine", "LPN");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_WorkOrderLine", "LPN", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_WorkOrderLine", "LPN").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for FromWarehouseUbication in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WorkOrderLine", "FromWarehouseUbication")]
        public virtual WarehouseUbication FromWarehouseUbication
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrderLine", "FromWarehouseUbication").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrderLine", "FromWarehouseUbication").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for FromWarehouseUbication in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarehouseUbication> FromWarehouseUbicationReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrderLine", "FromWarehouseUbication");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrderLine", "FromWarehouseUbication", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrderLine", "FromWarehouseUbication").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for ToWarehouseUbication in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbication_WorkOrderLine1", "ToWarehouseUbication")]
        public virtual WarehouseUbication ToWarehouseUbication
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrderLine1", "ToWarehouseUbication").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrderLine1", "ToWarehouseUbication").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for ToWarehouseUbication in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarehouseUbication> ToWarehouseUbicationReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrderLine1", "ToWarehouseUbication");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrderLine1", "ToWarehouseUbication", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbication>("WMDataAccess.Datamodel.WarehouseUbication_WorkOrderLine1", "ToWarehouseUbication").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            WorkOrderLine obj = new WorkOrderLine();
            obj.WOLineKey = WOLineKey;
            obj.ItemKey = ItemKey;
            obj.WorkOrderKey = WorkOrderKey;
            obj.Qty = Qty;
            obj.SourceKey = SourceKey;
            obj.LineNo = LineNo;
            obj.FromWhseUbicationKey = FromWhseUbicationKey;
            obj.ToWhseUbicationKey = ToWhseUbicationKey;
            obj.InvtLotKey = InvtLotKey;
            obj.Status = Status;
            obj.LPNKey = LPNKey;
            obj.CompleteDate = CompleteDate;
            obj.FromLevelNo = FromLevelNo;
            obj.ToLevelNo = ToLevelNo;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          WorkOrderLine toCompare = obj as WorkOrderLine;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.WOLineKey, toCompare.WOLineKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + WOLineKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WMSInventary in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ItemKey
    /// WhseKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WMSInventary")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WMSInventary : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new WMSInventary object.
        /// </summary>
        /// <param name="itemKey">Initial value of ItemKey.</param>
        /// <param name="whseKey">Initial value of WhseKey.</param>
        /// <param name="minQty">Initial value of MinQty.</param>
        /// <param name="maxQty">Initial value of MaxQty.</param>
        /// <param name="strgPatternKey">Initial value of StrgPatternKey.</param>
        public static WMSInventary CreateWMSInventary(int itemKey, int whseKey, decimal minQty, decimal maxQty, int strgPatternKey)
        {
            WMSInventary wMSInventary = new WMSInventary();
            wMSInventary.ItemKey = itemKey;
            wMSInventary.WhseKey = whseKey;
            wMSInventary.MinQty = minQty;
            wMSInventary.MaxQty = maxQty;
            wMSInventary.StrgPatternKey = strgPatternKey;
            return wMSInventary;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for ItemKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int ItemKey
        {
            get
            {
                int value = _ItemKey;
                OnGetItemKey(ref value);
                return value;
            }
            set
            {
                if (_ItemKey != value)
                {
                  OnItemKeyChanging(ref value);
                  ReportPropertyChanging("ItemKey");
                  _ItemKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ItemKey");
                  OnItemKeyChanged();
              }
            }
        }
        private int _ItemKey;
        partial void OnGetItemKey(ref int value);
        partial void OnItemKeyChanging(ref int value);
        partial void OnItemKeyChanged();
    
        /// <summary>
        /// There are no comments for WhseKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseKey
        {
            get
            {
                int value = _WhseKey;
                OnGetWhseKey(ref value);
                return value;
            }
            set
            {
                if (_WhseKey != value)
                {
                  OnWhseKeyChanging(ref value);
                  ReportPropertyChanging("WhseKey");
                  _WhseKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseKey");
                  OnWhseKeyChanged();
              }
            }
        }
        private int _WhseKey;
        partial void OnGetWhseKey(ref int value);
        partial void OnWhseKeyChanging(ref int value);
        partial void OnWhseKeyChanged();
    
        /// <summary>
        /// There are no comments for MinQty in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal MinQty
        {
            get
            {
                decimal value = _MinQty;
                OnGetMinQty(ref value);
                return value;
            }
            set
            {
                if (_MinQty != value)
                {
                  OnMinQtyChanging(ref value);
                  ReportPropertyChanging("MinQty");
                  _MinQty = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("MinQty");
                  OnMinQtyChanged();
              }
            }
        }
        private decimal _MinQty;
        partial void OnGetMinQty(ref decimal value);
        partial void OnMinQtyChanging(ref decimal value);
        partial void OnMinQtyChanged();
    
        /// <summary>
        /// There are no comments for MaxQty in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal MaxQty
        {
            get
            {
                decimal value = _MaxQty;
                OnGetMaxQty(ref value);
                return value;
            }
            set
            {
                if (_MaxQty != value)
                {
                  OnMaxQtyChanging(ref value);
                  ReportPropertyChanging("MaxQty");
                  _MaxQty = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("MaxQty");
                  OnMaxQtyChanged();
              }
            }
        }
        private decimal _MaxQty;
        partial void OnGetMaxQty(ref decimal value);
        partial void OnMaxQtyChanging(ref decimal value);
        partial void OnMaxQtyChanged();
    
        /// <summary>
        /// There are no comments for StrgPatternKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int StrgPatternKey
        {
            get
            {
                int value = _StrgPatternKey;
                OnGetStrgPatternKey(ref value);
                return value;
            }
            set
            {
                if (_StrgPatternKey != value)
                {
                  OnStrgPatternKeyChanging(ref value);
                  ReportPropertyChanging("StrgPatternKey");
                  _StrgPatternKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("StrgPatternKey");
                  OnStrgPatternKeyChanged();
              }
            }
        }
        private int _StrgPatternKey;
        partial void OnGetStrgPatternKey(ref int value);
        partial void OnStrgPatternKeyChanging(ref int value);
        partial void OnStrgPatternKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for StoragePattern in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "StoragePattern_WMSInventary", "StoragePattern")]
        public virtual StoragePattern StoragePattern
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StoragePattern>("WMDataAccess.Datamodel.StoragePattern_WMSInventary", "StoragePattern").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StoragePattern>("WMDataAccess.Datamodel.StoragePattern_WMSInventary", "StoragePattern").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for StoragePattern in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StoragePattern> StoragePatternReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StoragePattern>("WMDataAccess.Datamodel.StoragePattern_WMSInventary", "StoragePattern");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<StoragePattern>("WMDataAccess.Datamodel.StoragePattern_WMSInventary", "StoragePattern", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StoragePattern>("WMDataAccess.Datamodel.StoragePattern_WMSInventary", "StoragePattern").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for PickingAreas in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WMSInventary_PickingArea", "PickingAreas")]
        public virtual EntityCollection<PickingArea> PickingAreas
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PickingArea>("WMDataAccess.Datamodel.WMSInventary_PickingArea", "PickingAreas");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PickingArea>("WMDataAccess.Datamodel.WMSInventary_PickingArea", "PickingAreas", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            WMSInventary obj = new WMSInventary();
            obj.ItemKey = ItemKey;
            obj.WhseKey = WhseKey;
            obj.MinQty = MinQty;
            obj.MaxQty = MaxQty;
            obj.StrgPatternKey = StrgPatternKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          WMSInventary toCompare = obj as WMSInventary;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.ItemKey, toCompare.ItemKey))
            return false;
          if (!Object.Equals(this.WhseKey, toCompare.WhseKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + ItemKey.GetHashCode();
          hashCode = (hashCode * 7) + WhseKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.LPNRelation in the schema.
    /// </summary>
    /// <KeyProperties>
    /// LPNKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="LPNRelation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LPNRelation : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new LPNRelation object.
        /// </summary>
        /// <param name="itemKey">Initial value of ItemKey.</param>
        /// <param name="qty">Initial value of Qty.</param>
        /// <param name="lPN">Initial value of LPN.</param>
        /// <param name="lPNKey">Initial value of LPNKey.</param>
        public static LPNRelation CreateLPNRelation(int itemKey, decimal qty, string lPN, int lPNKey)
        {
            LPNRelation lPNRelation = new LPNRelation();
            lPNRelation.ItemKey = itemKey;
            lPNRelation.Qty = qty;
            lPNRelation.LPN = lPN;
            lPNRelation.LPNKey = lPNKey;
            return lPNRelation;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for ItemKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int ItemKey
        {
            get
            {
                int value = _ItemKey;
                OnGetItemKey(ref value);
                return value;
            }
            set
            {
                if (_ItemKey != value)
                {
                  OnItemKeyChanging(ref value);
                  ReportPropertyChanging("ItemKey");
                  _ItemKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ItemKey");
                  OnItemKeyChanged();
              }
            }
        }
        private int _ItemKey;
        partial void OnGetItemKey(ref int value);
        partial void OnItemKeyChanging(ref int value);
        partial void OnItemKeyChanged();
    
        /// <summary>
        /// There are no comments for LotKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? LotKey
        {
            get
            {
                int? value = _LotKey;
                OnGetLotKey(ref value);
                return value;
            }
            set
            {
                if (_LotKey != value)
                {
                  OnLotKeyChanging(ref value);
                  ReportPropertyChanging("LotKey");
                  _LotKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LotKey");
                  OnLotKeyChanged();
              }
            }
        }
        private int? _LotKey;
        partial void OnGetLotKey(ref int? value);
        partial void OnLotKeyChanging(ref int? value);
        partial void OnLotKeyChanged();
    
        /// <summary>
        /// There are no comments for Qty in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal Qty
        {
            get
            {
                decimal value = _Qty;
                OnGetQty(ref value);
                return value;
            }
            set
            {
                if (_Qty != value)
                {
                  OnQtyChanging(ref value);
                  ReportPropertyChanging("Qty");
                  _Qty = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Qty");
                  OnQtyChanged();
              }
            }
        }
        private decimal _Qty;
        partial void OnGetQty(ref decimal value);
        partial void OnQtyChanging(ref decimal value);
        partial void OnQtyChanged();
    
        /// <summary>
        /// There are no comments for LPN in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string LPN
        {
            get
            {
                string value = _LPN;
                OnGetLPN(ref value);
                return value;
            }
            set
            {
                if (_LPN != value)
                {
                  OnLPNChanging(ref value);
                  ReportPropertyChanging("LPN");
                  _LPN = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("LPN");
                  OnLPNChanged();
              }
            }
        }
        private string _LPN;
        partial void OnGetLPN(ref string value);
        partial void OnLPNChanging(ref string value);
        partial void OnLPNChanged();
    
        /// <summary>
        /// There are no comments for LPNKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int LPNKey
        {
            get
            {
                int value = _LPNKey;
                OnGetLPNKey(ref value);
                return value;
            }
            set
            {
                if (_LPNKey != value)
                {
                  OnLPNKeyChanging(ref value);
                  ReportPropertyChanging("LPNKey");
                  _LPNKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LPNKey");
                  OnLPNKeyChanged();
              }
            }
        }
        private int _LPNKey;
        partial void OnGetLPNKey(ref int value);
        partial void OnLPNKeyChanging(ref int value);
        partial void OnLPNKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for WorkOrderLines in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "LPNRelation_WorkOrderLine", "WorkOrderLines")]
        public virtual EntityCollection<WorkOrderLine> WorkOrderLines
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<WorkOrderLine>("WMDataAccess.Datamodel.LPNRelation_WorkOrderLine", "WorkOrderLines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<WorkOrderLine>("WMDataAccess.Datamodel.LPNRelation_WorkOrderLine", "WorkOrderLines", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for ReceiverLineLPNs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "LPNRelation_ReceiverLineLPN", "ReceiverLineLPNs")]
        public virtual EntityCollection<ReceiverLineLPN> ReceiverLineLPNs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<ReceiverLineLPN>("WMDataAccess.Datamodel.LPNRelation_ReceiverLineLPN", "ReceiverLineLPNs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<ReceiverLineLPN>("WMDataAccess.Datamodel.LPNRelation_ReceiverLineLPN", "ReceiverLineLPNs", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for WarehouseUbicationLogLevels in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "LPNRelation_WarehouseUbicationLogLevel", "WarehouseUbicationLogLevels")]
        public virtual EntityCollection<WarehouseUbicationLogLevel> WarehouseUbicationLogLevels
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<WarehouseUbicationLogLevel>("WMDataAccess.Datamodel.LPNRelation_WarehouseUbicationLogLevel", "WarehouseUbicationLogLevels");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<WarehouseUbicationLogLevel>("WMDataAccess.Datamodel.LPNRelation_WarehouseUbicationLogLevel", "WarehouseUbicationLogLevels", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            LPNRelation obj = new LPNRelation();
            obj.ItemKey = ItemKey;
            obj.LotKey = LotKey;
            obj.Qty = Qty;
            obj.LPN = LPN;
            obj.LPNKey = LPNKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          LPNRelation toCompare = obj as LPNRelation;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.LPNKey, toCompare.LPNKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + LPNKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.ReceiverLineLPN in the schema.
    /// </summary>
    /// <KeyProperties>
    /// RcvrLineKey
    /// LPNKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="ReceiverLineLPN")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ReceiverLineLPN : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new ReceiverLineLPN object.
        /// </summary>
        /// <param name="rcvrLineKey">Initial value of RcvrLineKey.</param>
        /// <param name="lPNKey">Initial value of LPNKey.</param>
        /// <param name="rcvrKey">Initial value of RcvrKey.</param>
        public static ReceiverLineLPN CreateReceiverLineLPN(int rcvrLineKey, int lPNKey, int rcvrKey)
        {
            ReceiverLineLPN receiverLineLPN = new ReceiverLineLPN();
            receiverLineLPN.RcvrLineKey = rcvrLineKey;
            receiverLineLPN.LPNKey = lPNKey;
            receiverLineLPN.RcvrKey = rcvrKey;
            return receiverLineLPN;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for RcvrLineKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int RcvrLineKey
        {
            get
            {
                int value = _RcvrLineKey;
                OnGetRcvrLineKey(ref value);
                return value;
            }
            set
            {
                if (_RcvrLineKey != value)
                {
                  OnRcvrLineKeyChanging(ref value);
                  ReportPropertyChanging("RcvrLineKey");
                  _RcvrLineKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("RcvrLineKey");
                  OnRcvrLineKeyChanged();
              }
            }
        }
        private int _RcvrLineKey;
        partial void OnGetRcvrLineKey(ref int value);
        partial void OnRcvrLineKeyChanging(ref int value);
        partial void OnRcvrLineKeyChanged();
    
        /// <summary>
        /// There are no comments for LPNKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int LPNKey
        {
            get
            {
                int value = _LPNKey;
                OnGetLPNKey(ref value);
                return value;
            }
            set
            {
                if (_LPNKey != value)
                {
                  OnLPNKeyChanging(ref value);
                  ReportPropertyChanging("LPNKey");
                  _LPNKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LPNKey");
                  OnLPNKeyChanged();
              }
            }
        }
        private int _LPNKey;
        partial void OnGetLPNKey(ref int value);
        partial void OnLPNKeyChanging(ref int value);
        partial void OnLPNKeyChanged();
    
        /// <summary>
        /// There are no comments for RcvrKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int RcvrKey
        {
            get
            {
                int value = _RcvrKey;
                OnGetRcvrKey(ref value);
                return value;
            }
            set
            {
                if (_RcvrKey != value)
                {
                  OnRcvrKeyChanging(ref value);
                  ReportPropertyChanging("RcvrKey");
                  _RcvrKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("RcvrKey");
                  OnRcvrKeyChanged();
              }
            }
        }
        private int _RcvrKey;
        partial void OnGetRcvrKey(ref int value);
        partial void OnRcvrKeyChanging(ref int value);
        partial void OnRcvrKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for LPNRelation in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "LPNRelation_ReceiverLineLPN", "LPNRelation")]
        public virtual LPNRelation LPNRelation
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_ReceiverLineLPN", "LPNRelation").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_ReceiverLineLPN", "LPNRelation").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for LPNRelation in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<LPNRelation> LPNRelationReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_ReceiverLineLPN", "LPNRelation");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_ReceiverLineLPN", "LPNRelation", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_ReceiverLineLPN", "LPNRelation").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            ReceiverLineLPN obj = new ReceiverLineLPN();
            obj.RcvrLineKey = RcvrLineKey;
            obj.LPNKey = LPNKey;
            obj.RcvrKey = RcvrKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          ReceiverLineLPN toCompare = obj as ReceiverLineLPN;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.RcvrLineKey, toCompare.RcvrLineKey))
            return false;
          if (!Object.Equals(this.LPNKey, toCompare.LPNKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + RcvrLineKey.GetHashCode();
          hashCode = (hashCode * 7) + LPNKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WMOption in the schema.
    /// </summary>
    /// <KeyProperties>
    /// CompanyID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WMOption")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WMOption : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new WMOption object.
        /// </summary>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <param name="ubicationUMKey">Initial value of UbicationUMKey.</param>
        /// <param name="maxLevel">Initial value of MaxLevel.</param>
        /// <param name="maxUbicationQuantity">Initial value of MaxUbicationQuantity.</param>
        /// <param name="fixedUbicationQty">Initial value of FixedUbicationQty.</param>
        public static WMOption CreateWMOption(string companyID, int ubicationUMKey, short maxLevel, int maxUbicationQuantity, bool fixedUbicationQty)
        {
            WMOption wMOption = new WMOption();
            wMOption.CompanyID = companyID;
            wMOption.UbicationUMKey = ubicationUMKey;
            wMOption.MaxLevel = maxLevel;
            wMOption.MaxUbicationQuantity = maxUbicationQuantity;
            wMOption.FixedUbicationQty = fixedUbicationQty;
            return wMOption;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for UbicationUMKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int UbicationUMKey
        {
            get
            {
                int value = _UbicationUMKey;
                OnGetUbicationUMKey(ref value);
                return value;
            }
            set
            {
                if (_UbicationUMKey != value)
                {
                  OnUbicationUMKeyChanging(ref value);
                  ReportPropertyChanging("UbicationUMKey");
                  _UbicationUMKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("UbicationUMKey");
                  OnUbicationUMKeyChanged();
              }
            }
        }
        private int _UbicationUMKey;
        partial void OnGetUbicationUMKey(ref int value);
        partial void OnUbicationUMKeyChanging(ref int value);
        partial void OnUbicationUMKeyChanged();
    
        /// <summary>
        /// There are no comments for MaxLevel in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short MaxLevel
        {
            get
            {
                short value = _MaxLevel;
                OnGetMaxLevel(ref value);
                return value;
            }
            set
            {
                if (_MaxLevel != value)
                {
                  OnMaxLevelChanging(ref value);
                  ReportPropertyChanging("MaxLevel");
                  _MaxLevel = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("MaxLevel");
                  OnMaxLevelChanged();
              }
            }
        }
        private short _MaxLevel;
        partial void OnGetMaxLevel(ref short value);
        partial void OnMaxLevelChanging(ref short value);
        partial void OnMaxLevelChanged();
    
        /// <summary>
        /// There are no comments for MaxUbicationQuantity in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int MaxUbicationQuantity
        {
            get
            {
                int value = _MaxUbicationQuantity;
                OnGetMaxUbicationQuantity(ref value);
                return value;
            }
            set
            {
                if (_MaxUbicationQuantity != value)
                {
                  OnMaxUbicationQuantityChanging(ref value);
                  ReportPropertyChanging("MaxUbicationQuantity");
                  _MaxUbicationQuantity = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("MaxUbicationQuantity");
                  OnMaxUbicationQuantityChanged();
              }
            }
        }
        private int _MaxUbicationQuantity;
        partial void OnGetMaxUbicationQuantity(ref int value);
        partial void OnMaxUbicationQuantityChanging(ref int value);
        partial void OnMaxUbicationQuantityChanged();
    
        /// <summary>
        /// There are no comments for FixedUbicationQty in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool FixedUbicationQty
        {
            get
            {
                bool value = _FixedUbicationQty;
                OnGetFixedUbicationQty(ref value);
                return value;
            }
            set
            {
                if (_FixedUbicationQty != value)
                {
                  OnFixedUbicationQtyChanging(ref value);
                  ReportPropertyChanging("FixedUbicationQty");
                  _FixedUbicationQty = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("FixedUbicationQty");
                  OnFixedUbicationQtyChanged();
              }
            }
        }
        private bool _FixedUbicationQty;
        partial void OnGetFixedUbicationQty(ref bool value);
        partial void OnFixedUbicationQtyChanging(ref bool value);
        partial void OnFixedUbicationQtyChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            WMOption obj = new WMOption();
            obj.CompanyID = CompanyID;
            obj.UbicationUMKey = UbicationUMKey;
            obj.MaxLevel = MaxLevel;
            obj.MaxUbicationQuantity = MaxUbicationQuantity;
            obj.FixedUbicationQty = FixedUbicationQty;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          WMOption toCompare = obj as WMOption;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.CompanyID, toCompare.CompanyID))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + CompanyID.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.ItemData in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ItemKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="ItemData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ItemData : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new ItemData object.
        /// </summary>
        /// <param name="itemKey">Initial value of ItemKey.</param>
        /// <param name="tamarery">Initial value of Tamarery.</param>
        /// <param name="rotation">Initial value of Rotation.</param>
        public static ItemData CreateItemData(int itemKey, short tamarery, short rotation)
        {
            ItemData itemData = new ItemData();
            itemData.ItemKey = itemKey;
            itemData.Tamarery = tamarery;
            itemData.Rotation = rotation;
            return itemData;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for ItemKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int ItemKey
        {
            get
            {
                int value = _ItemKey;
                OnGetItemKey(ref value);
                return value;
            }
            set
            {
                if (_ItemKey != value)
                {
                  OnItemKeyChanging(ref value);
                  ReportPropertyChanging("ItemKey");
                  _ItemKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ItemKey");
                  OnItemKeyChanged();
              }
            }
        }
        private int _ItemKey;
        partial void OnGetItemKey(ref int value);
        partial void OnItemKeyChanging(ref int value);
        partial void OnItemKeyChanged();
    
        /// <summary>
        /// There are no comments for Tamarery in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short Tamarery
        {
            get
            {
                short value = _Tamarery;
                OnGetTamarery(ref value);
                return value;
            }
            set
            {
                if (_Tamarery != value)
                {
                  OnTamareryChanging(ref value);
                  ReportPropertyChanging("Tamarery");
                  _Tamarery = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Tamarery");
                  OnTamareryChanged();
              }
            }
        }
        private short _Tamarery;
        partial void OnGetTamarery(ref short value);
        partial void OnTamareryChanging(ref short value);
        partial void OnTamareryChanged();
    
        /// <summary>
        /// There are no comments for Rotation in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short Rotation
        {
            get
            {
                short value = _Rotation;
                OnGetRotation(ref value);
                return value;
            }
            set
            {
                if (_Rotation != value)
                {
                  OnRotationChanging(ref value);
                  ReportPropertyChanging("Rotation");
                  _Rotation = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Rotation");
                  OnRotationChanged();
              }
            }
        }
        private short _Rotation;
        partial void OnGetRotation(ref short value);
        partial void OnRotationChanging(ref short value);
        partial void OnRotationChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            ItemData obj = new ItemData();
            obj.ItemKey = ItemKey;
            obj.Tamarery = Tamarery;
            obj.Rotation = Rotation;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          ItemData toCompare = obj as ItemData;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.ItemKey, toCompare.ItemKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + ItemKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.Customer in the schema.
    /// </summary>
    /// <KeyProperties>
    /// CustKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="Customer")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Customer : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new Customer object.
        /// </summary>
        /// <param name="custKey">Initial value of CustKey.</param>
        /// <param name="tLT">Initial value of TLT.</param>
        /// <param name="oLT">Initial value of OLT.</param>
        /// <param name="cLT">Initial value of CLT.</param>
        public static Customer CreateCustomer(int custKey, decimal tLT, decimal oLT, decimal cLT)
        {
            Customer customer = new Customer();
            customer.CustKey = custKey;
            customer.TLT = tLT;
            customer.OLT = oLT;
            customer.CLT = cLT;
            return customer;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for CustKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int CustKey
        {
            get
            {
                int value = _CustKey;
                OnGetCustKey(ref value);
                return value;
            }
            set
            {
                if (_CustKey != value)
                {
                  OnCustKeyChanging(ref value);
                  ReportPropertyChanging("CustKey");
                  _CustKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CustKey");
                  OnCustKeyChanged();
              }
            }
        }
        private int _CustKey;
        partial void OnGetCustKey(ref int value);
        partial void OnCustKeyChanging(ref int value);
        partial void OnCustKeyChanged();
    
        /// <summary>
        /// There are no comments for TLT in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal TLT
        {
            get
            {
                decimal value = _TLT;
                OnGetTLT(ref value);
                return value;
            }
            set
            {
                if (_TLT != value)
                {
                  OnTLTChanging(ref value);
                  ReportPropertyChanging("TLT");
                  _TLT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TLT");
                  OnTLTChanged();
              }
            }
        }
        private decimal _TLT;
        partial void OnGetTLT(ref decimal value);
        partial void OnTLTChanging(ref decimal value);
        partial void OnTLTChanged();
    
        /// <summary>
        /// There are no comments for OLT in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal OLT
        {
            get
            {
                decimal value = _OLT;
                OnGetOLT(ref value);
                return value;
            }
            set
            {
                if (_OLT != value)
                {
                  OnOLTChanging(ref value);
                  ReportPropertyChanging("OLT");
                  _OLT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OLT");
                  OnOLTChanged();
              }
            }
        }
        private decimal _OLT;
        partial void OnGetOLT(ref decimal value);
        partial void OnOLTChanging(ref decimal value);
        partial void OnOLTChanged();
    
        /// <summary>
        /// There are no comments for CLT in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal CLT
        {
            get
            {
                decimal value = _CLT;
                OnGetCLT(ref value);
                return value;
            }
            set
            {
                if (_CLT != value)
                {
                  OnCLTChanging(ref value);
                  ReportPropertyChanging("CLT");
                  _CLT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CLT");
                  OnCLTChanged();
              }
            }
        }
        private decimal _CLT;
        partial void OnGetCLT(ref decimal value);
        partial void OnCLTChanging(ref decimal value);
        partial void OnCLTChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Customer obj = new Customer();
            obj.CustKey = CustKey;
            obj.TLT = TLT;
            obj.OLT = OLT;
            obj.CLT = CLT;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          Customer toCompare = obj as Customer;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.CustKey, toCompare.CustKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + CustKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.TrunkType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// TrunkTypeKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="TrunkType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Tipo de Camión")]
    public partial class TrunkType : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new TrunkType object.
        /// </summary>
        /// <param name="trunkTypeKey">Initial value of TrunkTypeKey.</param>
        /// <param name="trunkTypeID">Initial value of TrunkTypeID.</param>
        /// <param name="capacity">Initial value of Capacity.</param>
        /// <param name="volumen">Initial value of Volumen.</param>
        /// <param name="ptlQty">Initial value of PtlQty.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        public static TrunkType CreateTrunkType(int trunkTypeKey, string trunkTypeID, decimal capacity, decimal volumen, decimal ptlQty, string companyID)
        {
            TrunkType trunkType = new TrunkType();
            trunkType.TrunkTypeKey = trunkTypeKey;
            trunkType.TrunkTypeID = trunkTypeID;
            trunkType.Capacity = capacity;
            trunkType.Volumen = volumen;
            trunkType.PtlQty = ptlQty;
            trunkType.CompanyID = companyID;
            return trunkType;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for TrunkTypeKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int TrunkTypeKey
        {
            get
            {
                int value = _TrunkTypeKey;
                OnGetTrunkTypeKey(ref value);
                return value;
            }
            set
            {
                if (_TrunkTypeKey != value)
                {
                  OnTrunkTypeKeyChanging(ref value);
                  ReportPropertyChanging("TrunkTypeKey");
                  _TrunkTypeKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TrunkTypeKey");
                  OnTrunkTypeKeyChanged();
              }
            }
        }
        private int _TrunkTypeKey;
        partial void OnGetTrunkTypeKey(ref int value);
        partial void OnTrunkTypeKeyChanging(ref int value);
        partial void OnTrunkTypeKeyChanged();
    
        /// <summary>
        /// There are no comments for TrunkTypeID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Tipo de Camión")]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Tipo de Camión")]
        public virtual string TrunkTypeID
        {
            get
            {
                string value = _TrunkTypeID;
                OnGetTrunkTypeID(ref value);
                return value;
            }
            set
            {
                if (_TrunkTypeID != value)
                {
                  OnTrunkTypeIDChanging(ref value);
                  ReportPropertyChanging("TrunkTypeID");
                  _TrunkTypeID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TrunkTypeID");
                  OnTrunkTypeIDChanged();
              }
            }
        }
        private string _TrunkTypeID;
        partial void OnGetTrunkTypeID(ref string value);
        partial void OnTrunkTypeIDChanging(ref string value);
        partial void OnTrunkTypeIDChanged();
    
        /// <summary>
        /// There are no comments for Capacity in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Capacidad")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        public virtual decimal Capacity
        {
            get
            {
                decimal value = _Capacity;
                OnGetCapacity(ref value);
                return value;
            }
            set
            {
                if (_Capacity != value)
                {
                  OnCapacityChanging(ref value);
                  ReportPropertyChanging("Capacity");
                  _Capacity = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Capacity");
                  OnCapacityChanged();
              }
            }
        }
        private decimal _Capacity;
        partial void OnGetCapacity(ref decimal value);
        partial void OnCapacityChanging(ref decimal value);
        partial void OnCapacityChanged();
    
        /// <summary>
        /// There are no comments for Volumen in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Volumen")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        public virtual decimal Volumen
        {
            get
            {
                decimal value = _Volumen;
                OnGetVolumen(ref value);
                return value;
            }
            set
            {
                if (_Volumen != value)
                {
                  OnVolumenChanging(ref value);
                  ReportPropertyChanging("Volumen");
                  _Volumen = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Volumen");
                  OnVolumenChanged();
              }
            }
        }
        private decimal _Volumen;
        partial void OnGetVolumen(ref decimal value);
        partial void OnVolumenChanging(ref decimal value);
        partial void OnVolumenChanged();
    
        /// <summary>
        /// There are no comments for PtlQty in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal PtlQty
        {
            get
            {
                decimal value = _PtlQty;
                OnGetPtlQty(ref value);
                return value;
            }
            set
            {
                if (_PtlQty != value)
                {
                  OnPtlQtyChanging(ref value);
                  ReportPropertyChanging("PtlQty");
                  _PtlQty = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PtlQty");
                  OnPtlQtyChanged();
              }
            }
        }
        private decimal _PtlQty;
        partial void OnGetPtlQty(ref decimal value);
        partial void OnPtlQtyChanging(ref decimal value);
        partial void OnPtlQtyChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Trunks in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TrunkType_Trunk", "Trunks")]
        public virtual EntityCollection<Trunk> Trunks
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Trunk>("WMDataAccess.Datamodel.TrunkType_Trunk", "Trunks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Trunk>("WMDataAccess.Datamodel.TrunkType_Trunk", "Trunks", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TransportTaxes in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TrunkType_TransportTax", "TransportTaxes")]
        public virtual EntityCollection<TransportTax> TransportTaxes
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TransportTax>("WMDataAccess.Datamodel.TrunkType_TransportTax", "TransportTaxes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TransportTax>("WMDataAccess.Datamodel.TrunkType_TransportTax", "TransportTaxes", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            TrunkType obj = new TrunkType();
            obj.TrunkTypeKey = TrunkTypeKey;
            obj.TrunkTypeID = TrunkTypeID;
            obj.Capacity = Capacity;
            obj.Volumen = Volumen;
            obj.PtlQty = PtlQty;
            obj.CompanyID = CompanyID;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          TrunkType toCompare = obj as TrunkType;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.TrunkTypeKey, toCompare.TrunkTypeKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + TrunkTypeKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.TransportZone in the schema.
    /// </summary>
    /// <KeyProperties>
    /// TransportZoneKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="TransportZone")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Zona de Transporte")]
    public partial class TransportZone : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new TransportZone object.
        /// </summary>
        /// <param name="transportZoneKey">Initial value of TransportZoneKey.</param>
        /// <param name="transportZoneID">Initial value of TransportZoneID.</param>
        /// <param name="description">Initial value of Description.</param>
        /// <param name="active">Initial value of Active.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <param name="transportTerritoryKey">Initial value of TransportTerritoryKey.</param>
        /// <param name="isRepresentative">Initial value of IsRepresentative.</param>
        public static TransportZone CreateTransportZone(int transportZoneKey, string transportZoneID, string description, bool active, string companyID, int transportTerritoryKey, bool isRepresentative)
        {
            TransportZone transportZone = new TransportZone();
            transportZone.TransportZoneKey = transportZoneKey;
            transportZone.TransportZoneID = transportZoneID;
            transportZone.Description = description;
            transportZone.Active = active;
            transportZone.CompanyID = companyID;
            transportZone.TransportTerritoryKey = transportTerritoryKey;
            transportZone.IsRepresentative = isRepresentative;
            return transportZone;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for TransportZoneKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int TransportZoneKey
        {
            get
            {
                int value = _TransportZoneKey;
                OnGetTransportZoneKey(ref value);
                return value;
            }
            set
            {
                if (_TransportZoneKey != value)
                {
                  OnTransportZoneKeyChanging(ref value);
                  ReportPropertyChanging("TransportZoneKey");
                  _TransportZoneKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TransportZoneKey");
                  OnTransportZoneKeyChanged();
              }
            }
        }
        private int _TransportZoneKey;
        partial void OnGetTransportZoneKey(ref int value);
        partial void OnTransportZoneKeyChanging(ref int value);
        partial void OnTransportZoneKeyChanged();
    
        /// <summary>
        /// There are no comments for TransportZoneID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Zona de Transporte")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Zona de Transporte")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        public virtual string TransportZoneID
        {
            get
            {
                string value = _TransportZoneID;
                OnGetTransportZoneID(ref value);
                return value;
            }
            set
            {
                if (_TransportZoneID != value)
                {
                  OnTransportZoneIDChanging(ref value);
                  ReportPropertyChanging("TransportZoneID");
                  _TransportZoneID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TransportZoneID");
                  OnTransportZoneIDChanged();
              }
            }
        }
        private string _TransportZoneID;
        partial void OnGetTransportZoneID(ref string value);
        partial void OnTransportZoneIDChanging(ref string value);
        partial void OnTransportZoneIDChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Descripción")]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Descripción")]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool Active
        {
            get
            {
                bool value = _Active;
                OnGetActive(ref value);
                return value;
            }
            set
            {
                if (_Active != value)
                {
                  OnActiveChanging(ref value);
                  ReportPropertyChanging("Active");
                  _Active = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Active");
                  OnActiveChanged();
              }
            }
        }
        private bool _Active;
        partial void OnGetActive(ref bool value);
        partial void OnActiveChanging(ref bool value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for TransportTerritoryKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int TransportTerritoryKey
        {
            get
            {
                int value = _TransportTerritoryKey;
                OnGetTransportTerritoryKey(ref value);
                return value;
            }
            set
            {
                if (_TransportTerritoryKey != value)
                {
                  OnTransportTerritoryKeyChanging(ref value);
                  ReportPropertyChanging("TransportTerritoryKey");
                  _TransportTerritoryKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TransportTerritoryKey");
                  OnTransportTerritoryKeyChanged();
              }
            }
        }
        private int _TransportTerritoryKey;
        partial void OnGetTransportTerritoryKey(ref int value);
        partial void OnTransportTerritoryKeyChanging(ref int value);
        partial void OnTransportTerritoryKeyChanged();
    
        /// <summary>
        /// There are no comments for IsRepresentative in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual bool IsRepresentative
        {
            get
            {
                bool value = _IsRepresentative;
                OnGetIsRepresentative(ref value);
                return value;
            }
            set
            {
                if (_IsRepresentative != value)
                {
                  OnIsRepresentativeChanging(ref value);
                  ReportPropertyChanging("IsRepresentative");
                  _IsRepresentative = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IsRepresentative");
                  OnIsRepresentativeChanged();
              }
            }
        }
        private bool _IsRepresentative = false;
        partial void OnGetIsRepresentative(ref bool value);
        partial void OnIsRepresentativeChanging(ref bool value);
        partial void OnIsRepresentativeChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for TransportTerritory in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportTerritory_TransportZone", "TransportTerritory")]
        public virtual TransportTerritory TransportTerritory
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportTerritory>("WMDataAccess.Datamodel.TransportTerritory_TransportZone", "TransportTerritory").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportTerritory>("WMDataAccess.Datamodel.TransportTerritory_TransportZone", "TransportTerritory").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TransportTerritory in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TransportTerritory> TransportTerritoryReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportTerritory>("WMDataAccess.Datamodel.TransportTerritory_TransportZone", "TransportTerritory");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TransportTerritory>("WMDataAccess.Datamodel.TransportTerritory_TransportZone", "TransportTerritory", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportTerritory>("WMDataAccess.Datamodel.TransportTerritory_TransportZone", "TransportTerritory").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            TransportZone obj = new TransportZone();
            obj.TransportZoneKey = TransportZoneKey;
            obj.TransportZoneID = TransportZoneID;
            obj.Description = Description;
            obj.Active = Active;
            obj.CompanyID = CompanyID;
            obj.TransportTerritoryKey = TransportTerritoryKey;
            obj.IsRepresentative = IsRepresentative;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          TransportZone toCompare = obj as TransportZone;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.TransportZoneKey, toCompare.TransportZoneKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + TransportZoneKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.Trunk in the schema.
    /// </summary>
    /// <KeyProperties>
    /// TrunkKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="Trunk")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Tipo de Camión")]
    public partial class Trunk : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new Trunk object.
        /// </summary>
        /// <param name="trunkKey">Initial value of TrunkKey.</param>
        /// <param name="trunID">Initial value of TrunID.</param>
        /// <param name="circulationNo">Initial value of CirculationNo.</param>
        /// <param name="trunkTypeKey">Initial value of TrunkTypeKey.</param>
        /// <param name="transCompanyKey">Initial value of TransCompanyKey.</param>
        public static Trunk CreateTrunk(int trunkKey, string trunID, string circulationNo, int trunkTypeKey, int transCompanyKey)
        {
            Trunk trunk = new Trunk();
            trunk.TrunkKey = trunkKey;
            trunk.TrunID = trunID;
            trunk.CirculationNo = circulationNo;
            trunk.TrunkTypeKey = trunkTypeKey;
            trunk.TransCompanyKey = transCompanyKey;
            return trunk;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for TrunkKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int TrunkKey
        {
            get
            {
                int value = _TrunkKey;
                OnGetTrunkKey(ref value);
                return value;
            }
            set
            {
                if (_TrunkKey != value)
                {
                  OnTrunkKeyChanging(ref value);
                  ReportPropertyChanging("TrunkKey");
                  _TrunkKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TrunkKey");
                  OnTrunkKeyChanged();
              }
            }
        }
        private int _TrunkKey;
        partial void OnGetTrunkKey(ref int value);
        partial void OnTrunkKeyChanging(ref int value);
        partial void OnTrunkKeyChanged();
    
        /// <summary>
        /// There are no comments for TrunID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string TrunID
        {
            get
            {
                string value = _TrunID;
                OnGetTrunID(ref value);
                return value;
            }
            set
            {
                if (_TrunID != value)
                {
                  OnTrunIDChanging(ref value);
                  ReportPropertyChanging("TrunID");
                  _TrunID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TrunID");
                  OnTrunIDChanged();
              }
            }
        }
        private string _TrunID;
        partial void OnGetTrunID(ref string value);
        partial void OnTrunIDChanging(ref string value);
        partial void OnTrunIDChanged();
    
        /// <summary>
        /// There are no comments for CirculationNo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CirculationNo
        {
            get
            {
                string value = _CirculationNo;
                OnGetCirculationNo(ref value);
                return value;
            }
            set
            {
                if (_CirculationNo != value)
                {
                  OnCirculationNoChanging(ref value);
                  ReportPropertyChanging("CirculationNo");
                  _CirculationNo = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CirculationNo");
                  OnCirculationNoChanged();
              }
            }
        }
        private string _CirculationNo;
        partial void OnGetCirculationNo(ref string value);
        partial void OnCirculationNoChanging(ref string value);
        partial void OnCirculationNoChanged();
    
        /// <summary>
        /// There are no comments for TrunkTypeKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int TrunkTypeKey
        {
            get
            {
                int value = _TrunkTypeKey;
                OnGetTrunkTypeKey(ref value);
                return value;
            }
            set
            {
                if (_TrunkTypeKey != value)
                {
                  OnTrunkTypeKeyChanging(ref value);
                  ReportPropertyChanging("TrunkTypeKey");
                  _TrunkTypeKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TrunkTypeKey");
                  OnTrunkTypeKeyChanged();
              }
            }
        }
        private int _TrunkTypeKey;
        partial void OnGetTrunkTypeKey(ref int value);
        partial void OnTrunkTypeKeyChanging(ref int value);
        partial void OnTrunkTypeKeyChanged();
    
        /// <summary>
        /// There are no comments for TransCompanyKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int TransCompanyKey
        {
            get
            {
                int value = _TransCompanyKey;
                OnGetTransCompanyKey(ref value);
                return value;
            }
            set
            {
                if (_TransCompanyKey != value)
                {
                  OnTransCompanyKeyChanging(ref value);
                  ReportPropertyChanging("TransCompanyKey");
                  _TransCompanyKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TransCompanyKey");
                  OnTransCompanyKeyChanged();
              }
            }
        }
        private int _TransCompanyKey;
        partial void OnGetTransCompanyKey(ref int value);
        partial void OnTransCompanyKeyChanging(ref int value);
        partial void OnTransCompanyKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for TrunkType in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TrunkType_Trunk", "TrunkType")]
        public virtual TrunkType TrunkType
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrunkType>("WMDataAccess.Datamodel.TrunkType_Trunk", "TrunkType").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrunkType>("WMDataAccess.Datamodel.TrunkType_Trunk", "TrunkType").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TrunkType in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrunkType> TrunkTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrunkType>("WMDataAccess.Datamodel.TrunkType_Trunk", "TrunkType");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TrunkType>("WMDataAccess.Datamodel.TrunkType_Trunk", "TrunkType", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrunkType>("WMDataAccess.Datamodel.TrunkType_Trunk", "TrunkType").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TransportCompany in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportCompany_Trunk", "TransportCompany")]
        public virtual TransportCompany TransportCompany
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Trunk", "TransportCompany").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Trunk", "TransportCompany").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TransportCompany in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TransportCompany> TransportCompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Trunk", "TransportCompany");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Trunk", "TransportCompany", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Trunk", "TransportCompany").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Trunk obj = new Trunk();
            obj.TrunkKey = TrunkKey;
            obj.TrunID = TrunID;
            obj.CirculationNo = CirculationNo;
            obj.TrunkTypeKey = TrunkTypeKey;
            obj.TransCompanyKey = TransCompanyKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          Trunk toCompare = obj as Trunk;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.TrunkKey, toCompare.TrunkKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + TrunkKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.Delivery in the schema.
    /// </summary>
    /// <KeyProperties>
    /// DeliveryKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="Delivery")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Delivery")]
    public partial class Delivery : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new Delivery object.
        /// </summary>
        /// <param name="deliveryKey">Initial value of DeliveryKey.</param>
        /// <param name="deliveryID">Initial value of DeliveryID.</param>
        /// <param name="date">Initial value of Date.</param>
        /// <param name="status">Initial value of Status.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        public static Delivery CreateDelivery(int deliveryKey, string deliveryID, global::System.DateTime date, short status, string companyID)
        {
            Delivery delivery = new Delivery();
            delivery.DeliveryKey = deliveryKey;
            delivery.DeliveryID = deliveryID;
            delivery.Date = date;
            delivery.Status = status;
            delivery.CompanyID = companyID;
            return delivery;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DeliveryKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int DeliveryKey
        {
            get
            {
                int value = _DeliveryKey;
                OnGetDeliveryKey(ref value);
                return value;
            }
            set
            {
                if (_DeliveryKey != value)
                {
                  OnDeliveryKeyChanging(ref value);
                  ReportPropertyChanging("DeliveryKey");
                  _DeliveryKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DeliveryKey");
                  OnDeliveryKeyChanged();
              }
            }
        }
        private int _DeliveryKey;
        partial void OnGetDeliveryKey(ref int value);
        partial void OnDeliveryKeyChanging(ref int value);
        partial void OnDeliveryKeyChanged();
    
        /// <summary>
        /// There are no comments for DeliveryID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Delivery")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Delivery")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        public virtual string DeliveryID
        {
            get
            {
                string value = _DeliveryID;
                OnGetDeliveryID(ref value);
                return value;
            }
            set
            {
                if (_DeliveryID != value)
                {
                  OnDeliveryIDChanging(ref value);
                  ReportPropertyChanging("DeliveryID");
                  _DeliveryID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DeliveryID");
                  OnDeliveryIDChanged();
              }
            }
        }
        private string _DeliveryID;
        partial void OnGetDeliveryID(ref string value);
        partial void OnDeliveryIDChanging(ref string value);
        partial void OnDeliveryIDChanged();
    
        /// <summary>
        /// There are no comments for Date in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Fecha")]
        public virtual global::System.DateTime Date
        {
            get
            {
                global::System.DateTime value = _Date;
                OnGetDate(ref value);
                return value;
            }
            set
            {
                if (_Date != value)
                {
                  OnDateChanging(ref value);
                  ReportPropertyChanging("Date");
                  _Date = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Date");
                  OnDateChanged();
              }
            }
        }
        private global::System.DateTime _Date;
        partial void OnGetDate(ref global::System.DateTime value);
        partial void OnDateChanging(ref global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupStaticColumn(@"tsoDeliveries", @"Status")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Estado")]
        public virtual short Status
        {
            get
            {
                short value = _Status;
                OnGetStatus(ref value);
                return value;
            }
            set
            {
                if (_Status != value)
                {
                  OnStatusChanging(ref value);
                  ReportPropertyChanging("Status");
                  _Status = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Status");
                  OnStatusChanged();
              }
            }
        }
        private short _Status;
        partial void OnGetStatus(ref short value);
        partial void OnStatusChanging(ref short value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DeliveryLines in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "Delivery_DeliveryLine", "DeliveryLines")]
        public virtual EntityCollection<DeliveryLine> DeliveryLines
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DeliveryLine>("WMDataAccess.Datamodel.Delivery_DeliveryLine", "DeliveryLines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DeliveryLine>("WMDataAccess.Datamodel.Delivery_DeliveryLine", "DeliveryLines", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Delivery obj = new Delivery();
            obj.DeliveryKey = DeliveryKey;
            obj.DeliveryID = DeliveryID;
            obj.Date = Date;
            obj.Status = Status;
            obj.CompanyID = CompanyID;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          Delivery toCompare = obj as Delivery;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.DeliveryKey, toCompare.DeliveryKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + DeliveryKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.DeliveryLine in the schema.
    /// </summary>
    /// <KeyProperties>
    /// DeliveryLineKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="DeliveryLine")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DeliveryLine : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new DeliveryLine object.
        /// </summary>
        /// <param name="deliveryLineKey">Initial value of DeliveryLineKey.</param>
        /// <param name="sOLineKey">Initial value of SOLineKey.</param>
        /// <param name="deliveryKey">Initial value of DeliveryKey.</param>
        public static DeliveryLine CreateDeliveryLine(int deliveryLineKey, int sOLineKey, int deliveryKey)
        {
            DeliveryLine deliveryLine = new DeliveryLine();
            deliveryLine.DeliveryLineKey = deliveryLineKey;
            deliveryLine.SOLineKey = sOLineKey;
            deliveryLine.DeliveryKey = deliveryKey;
            return deliveryLine;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DeliveryLineKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DeliveryLineKey
        {
            get
            {
                int value = _DeliveryLineKey;
                OnGetDeliveryLineKey(ref value);
                return value;
            }
            set
            {
                if (_DeliveryLineKey != value)
                {
                  OnDeliveryLineKeyChanging(ref value);
                  ReportPropertyChanging("DeliveryLineKey");
                  _DeliveryLineKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DeliveryLineKey");
                  OnDeliveryLineKeyChanged();
              }
            }
        }
        private int _DeliveryLineKey;
        partial void OnGetDeliveryLineKey(ref int value);
        partial void OnDeliveryLineKeyChanging(ref int value);
        partial void OnDeliveryLineKeyChanged();
    
        /// <summary>
        /// There are no comments for SOLineKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int SOLineKey
        {
            get
            {
                int value = _SOLineKey;
                OnGetSOLineKey(ref value);
                return value;
            }
            set
            {
                if (_SOLineKey != value)
                {
                  OnSOLineKeyChanging(ref value);
                  ReportPropertyChanging("SOLineKey");
                  _SOLineKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("SOLineKey");
                  OnSOLineKeyChanged();
              }
            }
        }
        private int _SOLineKey;
        partial void OnGetSOLineKey(ref int value);
        partial void OnSOLineKeyChanging(ref int value);
        partial void OnSOLineKeyChanged();
    
        /// <summary>
        /// There are no comments for DeliveryKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DeliveryKey
        {
            get
            {
                int value = _DeliveryKey;
                OnGetDeliveryKey(ref value);
                return value;
            }
            set
            {
                if (_DeliveryKey != value)
                {
                  OnDeliveryKeyChanging(ref value);
                  ReportPropertyChanging("DeliveryKey");
                  _DeliveryKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DeliveryKey");
                  OnDeliveryKeyChanged();
              }
            }
        }
        private int _DeliveryKey;
        partial void OnGetDeliveryKey(ref int value);
        partial void OnDeliveryKeyChanging(ref int value);
        partial void OnDeliveryKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Delivery in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "Delivery_DeliveryLine", "Delivery")]
        public virtual Delivery Delivery
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Delivery>("WMDataAccess.Datamodel.Delivery_DeliveryLine", "Delivery").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Delivery>("WMDataAccess.Datamodel.Delivery_DeliveryLine", "Delivery").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Delivery in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Delivery> DeliveryReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Delivery>("WMDataAccess.Datamodel.Delivery_DeliveryLine", "Delivery");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Delivery>("WMDataAccess.Datamodel.Delivery_DeliveryLine", "Delivery", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Delivery>("WMDataAccess.Datamodel.Delivery_DeliveryLine", "Delivery").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DispatchLines in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "DeliveryLine_DispatchLine", "DispatchLines")]
        public virtual EntityCollection<DispatchLine> DispatchLines
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DispatchLine>("WMDataAccess.Datamodel.DeliveryLine_DispatchLine", "DispatchLines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DispatchLine>("WMDataAccess.Datamodel.DeliveryLine_DispatchLine", "DispatchLines", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DeliveryLine obj = new DeliveryLine();
            obj.DeliveryLineKey = DeliveryLineKey;
            obj.SOLineKey = SOLineKey;
            obj.DeliveryKey = DeliveryKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          DeliveryLine toCompare = obj as DeliveryLine;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.DeliveryLineKey, toCompare.DeliveryLineKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + DeliveryLineKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WMSWarehouse in the schema.
    /// </summary>
    /// <KeyProperties>
    /// WhseKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WMSWarehouse")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WMSWarehouse : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new WMSWarehouse object.
        /// </summary>
        /// <param name="whseKey">Initial value of WhseKey.</param>
        /// <param name="distributionCenterKey">Initial value of DistributionCenterKey.</param>
        /// <param name="type">Initial value of Type.</param>
        public static WMSWarehouse CreateWMSWarehouse(int whseKey, int distributionCenterKey, short type)
        {
            WMSWarehouse wMSWarehouse = new WMSWarehouse();
            wMSWarehouse.WhseKey = whseKey;
            wMSWarehouse.DistributionCenterKey = distributionCenterKey;
            wMSWarehouse.Type = type;
            return wMSWarehouse;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for WhseKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseKey
        {
            get
            {
                int value = _WhseKey;
                OnGetWhseKey(ref value);
                return value;
            }
            set
            {
                if (_WhseKey != value)
                {
                  OnWhseKeyChanging(ref value);
                  ReportPropertyChanging("WhseKey");
                  _WhseKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseKey");
                  OnWhseKeyChanged();
              }
            }
        }
        private int _WhseKey;
        partial void OnGetWhseKey(ref int value);
        partial void OnWhseKeyChanging(ref int value);
        partial void OnWhseKeyChanged();
    
        /// <summary>
        /// There are no comments for DistributionCenterKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int DistributionCenterKey
        {
            get
            {
                int value = _DistributionCenterKey;
                OnGetDistributionCenterKey(ref value);
                return value;
            }
            set
            {
                if (_DistributionCenterKey != value)
                {
                  OnDistributionCenterKeyChanging(ref value);
                  ReportPropertyChanging("DistributionCenterKey");
                  _DistributionCenterKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DistributionCenterKey");
                  OnDistributionCenterKeyChanged();
              }
            }
        }
        private int _DistributionCenterKey;
        partial void OnGetDistributionCenterKey(ref int value);
        partial void OnDistributionCenterKeyChanging(ref int value);
        partial void OnDistributionCenterKeyChanged();
    
        /// <summary>
        /// There are no comments for LockInvtTranKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? LockInvtTranKey
        {
            get
            {
                int? value = _LockInvtTranKey;
                OnGetLockInvtTranKey(ref value);
                return value;
            }
            set
            {
                if (_LockInvtTranKey != value)
                {
                  OnLockInvtTranKeyChanging(ref value);
                  ReportPropertyChanging("LockInvtTranKey");
                  _LockInvtTranKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LockInvtTranKey");
                  OnLockInvtTranKeyChanged();
              }
            }
        }
        private int? _LockInvtTranKey;
        partial void OnGetLockInvtTranKey(ref int? value);
        partial void OnLockInvtTranKeyChanging(ref int? value);
        partial void OnLockInvtTranKeyChanged();
    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short Type
        {
            get
            {
                short value = _Type;
                OnGetType(ref value);
                return value;
            }
            set
            {
                if (_Type != value)
                {
                  OnTypeChanging(ref value);
                  ReportPropertyChanging("Type");
                  _Type = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Type");
                  OnTypeChanged();
              }
            }
        }
        private short _Type;
        partial void OnGetType(ref short value);
        partial void OnTypeChanging(ref short value);
        partial void OnTypeChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Center in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "Center_WMSWarehouse", "Center")]
        public virtual Center Center
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Center>("WMDataAccess.Datamodel.Center_WMSWarehouse", "Center").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Center>("WMDataAccess.Datamodel.Center_WMSWarehouse", "Center").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Center in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Center> CenterReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Center>("WMDataAccess.Datamodel.Center_WMSWarehouse", "Center");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Center>("WMDataAccess.Datamodel.Center_WMSWarehouse", "Center", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Center>("WMDataAccess.Datamodel.Center_WMSWarehouse", "Center").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            WMSWarehouse obj = new WMSWarehouse();
            obj.WhseKey = WhseKey;
            obj.DistributionCenterKey = DistributionCenterKey;
            obj.LockInvtTranKey = LockInvtTranKey;
            obj.Type = Type;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          WMSWarehouse toCompare = obj as WMSWarehouse;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.WhseKey, toCompare.WhseKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + WhseKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.Dispatch in the schema.
    /// </summary>
    /// <KeyProperties>
    /// DispatchKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="Dispatch")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Despacho")]
    public partial class Dispatch : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new Dispatch object.
        /// </summary>
        /// <param name="dispatchKey">Initial value of DispatchKey.</param>
        /// <param name="tranNo">Initial value of TranNo.</param>
        /// <param name="picking">Initial value of Picking.</param>
        /// <param name="status">Initial value of Status.</param>
        /// <param name="tranDate">Initial value of TranDate.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        public static Dispatch CreateDispatch(int dispatchKey, string tranNo, short picking, short status, global::System.DateTime tranDate, string companyID)
        {
            Dispatch dispatch = new Dispatch();
            dispatch.DispatchKey = dispatchKey;
            dispatch.TranNo = tranNo;
            dispatch.Picking = picking;
            dispatch.Status = status;
            dispatch.TranDate = tranDate;
            dispatch.CompanyID = companyID;
            return dispatch;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DispatchKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int DispatchKey
        {
            get
            {
                int value = _DispatchKey;
                OnGetDispatchKey(ref value);
                return value;
            }
            set
            {
                if (_DispatchKey != value)
                {
                  OnDispatchKeyChanging(ref value);
                  ReportPropertyChanging("DispatchKey");
                  _DispatchKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DispatchKey");
                  OnDispatchKeyChanged();
              }
            }
        }
        private int _DispatchKey;
        partial void OnGetDispatchKey(ref int value);
        partial void OnDispatchKeyChanging(ref int value);
        partial void OnDispatchKeyChanged();
    
        /// <summary>
        /// There are no comments for TranNo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"No Despacho")]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"No Despacho")]
        public virtual string TranNo
        {
            get
            {
                string value = _TranNo;
                OnGetTranNo(ref value);
                return value;
            }
            set
            {
                if (_TranNo != value)
                {
                  OnTranNoChanging(ref value);
                  ReportPropertyChanging("TranNo");
                  _TranNo = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TranNo");
                  OnTranNoChanged();
              }
            }
        }
        private string _TranNo;
        partial void OnGetTranNo(ref string value);
        partial void OnTranNoChanging(ref string value);
        partial void OnTranNoChanged();
    
        /// <summary>
        /// There are no comments for Picking in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short Picking
        {
            get
            {
                short value = _Picking;
                OnGetPicking(ref value);
                return value;
            }
            set
            {
                if (_Picking != value)
                {
                  OnPickingChanging(ref value);
                  ReportPropertyChanging("Picking");
                  _Picking = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Picking");
                  OnPickingChanged();
              }
            }
        }
        private short _Picking;
        partial void OnGetPicking(ref short value);
        partial void OnPickingChanging(ref short value);
        partial void OnPickingChanged();
    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Estado")]
        [Net4Sage.Controls.Lookup.LookupStaticColumn(@"tsoDispatches", @"Status")]
        public virtual short Status
        {
            get
            {
                short value = _Status;
                OnGetStatus(ref value);
                return value;
            }
            set
            {
                if (_Status != value)
                {
                  OnStatusChanging(ref value);
                  ReportPropertyChanging("Status");
                  _Status = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Status");
                  OnStatusChanged();
              }
            }
        }
        private short _Status;
        partial void OnGetStatus(ref short value);
        partial void OnStatusChanging(ref short value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// There are no comments for GateKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int? GateKey
        {
            get
            {
                int? value = _GateKey;
                OnGetGateKey(ref value);
                return value;
            }
            set
            {
                if (_GateKey != value)
                {
                  OnGateKeyChanging(ref value);
                  ReportPropertyChanging("GateKey");
                  _GateKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("GateKey");
                  OnGateKeyChanged();
              }
            }
        }
        private int? _GateKey;
        partial void OnGetGateKey(ref int? value);
        partial void OnGateKeyChanging(ref int? value);
        partial void OnGateKeyChanged();
    
        /// <summary>
        /// There are no comments for TransCompanyKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int? TransCompanyKey
        {
            get
            {
                int? value = _TransCompanyKey;
                OnGetTransCompanyKey(ref value);
                return value;
            }
            set
            {
                if (_TransCompanyKey != value)
                {
                  OnTransCompanyKeyChanging(ref value);
                  ReportPropertyChanging("TransCompanyKey");
                  _TransCompanyKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TransCompanyKey");
                  OnTransCompanyKeyChanged();
              }
            }
        }
        private int? _TransCompanyKey;
        partial void OnGetTransCompanyKey(ref int? value);
        partial void OnTransCompanyKeyChanging(ref int? value);
        partial void OnTransCompanyKeyChanged();
    
        /// <summary>
        /// There are no comments for TranDate in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual global::System.DateTime TranDate
        {
            get
            {
                global::System.DateTime value = _TranDate;
                OnGetTranDate(ref value);
                return value;
            }
            set
            {
                if (_TranDate != value)
                {
                  OnTranDateChanging(ref value);
                  ReportPropertyChanging("TranDate");
                  _TranDate = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TranDate");
                  OnTranDateChanged();
              }
            }
        }
        private global::System.DateTime _TranDate;
        partial void OnGetTranDate(ref global::System.DateTime value);
        partial void OnTranDateChanging(ref global::System.DateTime value);
        partial void OnTranDateChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Gate in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "Gate_Dispatch", "Gate")]
        public virtual Gate Gate
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Gate>("WMDataAccess.Datamodel.Gate_Dispatch", "Gate").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Gate>("WMDataAccess.Datamodel.Gate_Dispatch", "Gate").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Gate in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Gate> GateReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Gate>("WMDataAccess.Datamodel.Gate_Dispatch", "Gate");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Gate>("WMDataAccess.Datamodel.Gate_Dispatch", "Gate", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Gate>("WMDataAccess.Datamodel.Gate_Dispatch", "Gate").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TransportCompany in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportCompany_Dispatch", "TransportCompany")]
        public virtual TransportCompany TransportCompany
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Dispatch", "TransportCompany").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Dispatch", "TransportCompany").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TransportCompany in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TransportCompany> TransportCompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Dispatch", "TransportCompany");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Dispatch", "TransportCompany", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_Dispatch", "TransportCompany").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DispatchLines in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "Dispatch_DispatchLine", "DispatchLines")]
        public virtual EntityCollection<DispatchLine> DispatchLines
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DispatchLine>("WMDataAccess.Datamodel.Dispatch_DispatchLine", "DispatchLines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DispatchLine>("WMDataAccess.Datamodel.Dispatch_DispatchLine", "DispatchLines", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Dispatch obj = new Dispatch();
            obj.DispatchKey = DispatchKey;
            obj.TranNo = TranNo;
            obj.Picking = Picking;
            obj.Status = Status;
            obj.GateKey = GateKey;
            obj.TransCompanyKey = TransCompanyKey;
            obj.TranDate = TranDate;
            obj.CompanyID = CompanyID;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          Dispatch toCompare = obj as Dispatch;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.DispatchKey, toCompare.DispatchKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + DispatchKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.DispatchLine in the schema.
    /// </summary>
    /// <KeyProperties>
    /// DDLineKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="DispatchLine")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DispatchLine : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new DispatchLine object.
        /// </summary>
        /// <param name="dDLineKey">Initial value of DDLineKey.</param>
        /// <param name="dispatchKey">Initial value of DispatchKey.</param>
        /// <param name="deliveryLineKey">Initial value of DeliveryLineKey.</param>
        public static DispatchLine CreateDispatchLine(int dDLineKey, int dispatchKey, int deliveryLineKey)
        {
            DispatchLine dispatchLine = new DispatchLine();
            dispatchLine.DDLineKey = dDLineKey;
            dispatchLine.DispatchKey = dispatchKey;
            dispatchLine.DeliveryLineKey = deliveryLineKey;
            return dispatchLine;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DDLineKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DDLineKey
        {
            get
            {
                int value = _DDLineKey;
                OnGetDDLineKey(ref value);
                return value;
            }
            set
            {
                if (_DDLineKey != value)
                {
                  OnDDLineKeyChanging(ref value);
                  ReportPropertyChanging("DDLineKey");
                  _DDLineKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DDLineKey");
                  OnDDLineKeyChanged();
              }
            }
        }
        private int _DDLineKey;
        partial void OnGetDDLineKey(ref int value);
        partial void OnDDLineKeyChanging(ref int value);
        partial void OnDDLineKeyChanged();
    
        /// <summary>
        /// There are no comments for DispatchKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DispatchKey
        {
            get
            {
                int value = _DispatchKey;
                OnGetDispatchKey(ref value);
                return value;
            }
            set
            {
                if (_DispatchKey != value)
                {
                  OnDispatchKeyChanging(ref value);
                  ReportPropertyChanging("DispatchKey");
                  _DispatchKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DispatchKey");
                  OnDispatchKeyChanged();
              }
            }
        }
        private int _DispatchKey;
        partial void OnGetDispatchKey(ref int value);
        partial void OnDispatchKeyChanging(ref int value);
        partial void OnDispatchKeyChanged();
    
        /// <summary>
        /// There are no comments for DeliveryLineKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DeliveryLineKey
        {
            get
            {
                int value = _DeliveryLineKey;
                OnGetDeliveryLineKey(ref value);
                return value;
            }
            set
            {
                if (_DeliveryLineKey != value)
                {
                  OnDeliveryLineKeyChanging(ref value);
                  ReportPropertyChanging("DeliveryLineKey");
                  _DeliveryLineKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DeliveryLineKey");
                  OnDeliveryLineKeyChanged();
              }
            }
        }
        private int _DeliveryLineKey;
        partial void OnGetDeliveryLineKey(ref int value);
        partial void OnDeliveryLineKeyChanging(ref int value);
        partial void OnDeliveryLineKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Dispatch in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "Dispatch_DispatchLine", "Dispatch")]
        public virtual Dispatch Dispatch
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Dispatch>("WMDataAccess.Datamodel.Dispatch_DispatchLine", "Dispatch").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Dispatch>("WMDataAccess.Datamodel.Dispatch_DispatchLine", "Dispatch").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Dispatch in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Dispatch> DispatchReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Dispatch>("WMDataAccess.Datamodel.Dispatch_DispatchLine", "Dispatch");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Dispatch>("WMDataAccess.Datamodel.Dispatch_DispatchLine", "Dispatch", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Dispatch>("WMDataAccess.Datamodel.Dispatch_DispatchLine", "Dispatch").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DeliveryLine in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "DeliveryLine_DispatchLine", "DeliveryLine")]
        public virtual DeliveryLine DeliveryLine
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DeliveryLine>("WMDataAccess.Datamodel.DeliveryLine_DispatchLine", "DeliveryLine").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DeliveryLine>("WMDataAccess.Datamodel.DeliveryLine_DispatchLine", "DeliveryLine").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DeliveryLine in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DeliveryLine> DeliveryLineReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DeliveryLine>("WMDataAccess.Datamodel.DeliveryLine_DispatchLine", "DeliveryLine");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DeliveryLine>("WMDataAccess.Datamodel.DeliveryLine_DispatchLine", "DeliveryLine", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DeliveryLine>("WMDataAccess.Datamodel.DeliveryLine_DispatchLine", "DeliveryLine").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DispatchLineOrders in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "DispatchLine_DispatchLineOrder", "DispatchLineOrders")]
        public virtual EntityCollection<DispatchLineOrder> DispatchLineOrders
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DispatchLineOrder>("WMDataAccess.Datamodel.DispatchLine_DispatchLineOrder", "DispatchLineOrders");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DispatchLineOrder>("WMDataAccess.Datamodel.DispatchLine_DispatchLineOrder", "DispatchLineOrders", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DispatchLine obj = new DispatchLine();
            obj.DDLineKey = DDLineKey;
            obj.DispatchKey = DispatchKey;
            obj.DeliveryLineKey = DeliveryLineKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          DispatchLine toCompare = obj as DispatchLine;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.DDLineKey, toCompare.DDLineKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + DDLineKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.TransportTerritory in the schema.
    /// </summary>
    /// <KeyProperties>
    /// TransportTerritoryKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="TransportTerritory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Territorio")]
    public partial class TransportTerritory : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new TransportTerritory object.
        /// </summary>
        /// <param name="transportTerritoryKey">Initial value of TransportTerritoryKey.</param>
        /// <param name="territoryID">Initial value of TerritoryID.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <param name="description">Initial value of Description.</param>
        public static TransportTerritory CreateTransportTerritory(int transportTerritoryKey, string territoryID, string companyID, string description)
        {
            TransportTerritory transportTerritory = new TransportTerritory();
            transportTerritory.TransportTerritoryKey = transportTerritoryKey;
            transportTerritory.TerritoryID = territoryID;
            transportTerritory.CompanyID = companyID;
            transportTerritory.Description = description;
            return transportTerritory;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for TransportTerritoryKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int TransportTerritoryKey
        {
            get
            {
                int value = _TransportTerritoryKey;
                OnGetTransportTerritoryKey(ref value);
                return value;
            }
            set
            {
                if (_TransportTerritoryKey != value)
                {
                  OnTransportTerritoryKeyChanging(ref value);
                  ReportPropertyChanging("TransportTerritoryKey");
                  _TransportTerritoryKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TransportTerritoryKey");
                  OnTransportTerritoryKeyChanged();
              }
            }
        }
        private int _TransportTerritoryKey;
        partial void OnGetTransportTerritoryKey(ref int value);
        partial void OnTransportTerritoryKeyChanging(ref int value);
        partial void OnTransportTerritoryKeyChanged();
    
        /// <summary>
        /// There are no comments for TerritoryID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Territorio")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Territorio")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        public virtual string TerritoryID
        {
            get
            {
                string value = _TerritoryID;
                OnGetTerritoryID(ref value);
                return value;
            }
            set
            {
                if (_TerritoryID != value)
                {
                  OnTerritoryIDChanging(ref value);
                  ReportPropertyChanging("TerritoryID");
                  _TerritoryID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TerritoryID");
                  OnTerritoryIDChanged();
              }
            }
        }
        private string _TerritoryID;
        partial void OnGetTerritoryID(ref string value);
        partial void OnTerritoryIDChanging(ref string value);
        partial void OnTerritoryIDChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Descripción")]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for TransportZones in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportTerritory_TransportZone", "TransportZones")]
        public virtual EntityCollection<TransportZone> TransportZones
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TransportZone>("WMDataAccess.Datamodel.TransportTerritory_TransportZone", "TransportZones");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TransportZone>("WMDataAccess.Datamodel.TransportTerritory_TransportZone", "TransportZones", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            TransportTerritory obj = new TransportTerritory();
            obj.TransportTerritoryKey = TransportTerritoryKey;
            obj.TerritoryID = TerritoryID;
            obj.CompanyID = CompanyID;
            obj.Description = Description;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          TransportTerritory toCompare = obj as TransportTerritory;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.TransportTerritoryKey, toCompare.TransportTerritoryKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + TransportTerritoryKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.TransportTax in the schema.
    /// </summary>
    /// <KeyProperties>
    /// TransportTaxKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="TransportTax")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TransportTax : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new TransportTax object.
        /// </summary>
        /// <param name="transportTaxKey">Initial value of TransportTaxKey.</param>
        /// <param name="transportTaxID">Initial value of TransportTaxID.</param>
        /// <param name="tax">Initial value of Tax.</param>
        /// <param name="trunkTypeKey">Initial value of TrunkTypeKey.</param>
        /// <param name="transCompanyKey">Initial value of TransCompanyKey.</param>
        /// <param name="fromTransportZoneKey">Initial value of FromTransportZoneKey.</param>
        /// <param name="toTransportZoneKey">Initial value of ToTransportZoneKey.</param>
        public static TransportTax CreateTransportTax(int transportTaxKey, string transportTaxID, decimal tax, int trunkTypeKey, int transCompanyKey, int fromTransportZoneKey, int toTransportZoneKey)
        {
            TransportTax transportTax = new TransportTax();
            transportTax.TransportTaxKey = transportTaxKey;
            transportTax.TransportTaxID = transportTaxID;
            transportTax.Tax = tax;
            transportTax.TrunkTypeKey = trunkTypeKey;
            transportTax.TransCompanyKey = transCompanyKey;
            transportTax.FromTransportZoneKey = fromTransportZoneKey;
            transportTax.ToTransportZoneKey = toTransportZoneKey;
            return transportTax;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for TransportTaxKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int TransportTaxKey
        {
            get
            {
                int value = _TransportTaxKey;
                OnGetTransportTaxKey(ref value);
                return value;
            }
            set
            {
                if (_TransportTaxKey != value)
                {
                  OnTransportTaxKeyChanging(ref value);
                  ReportPropertyChanging("TransportTaxKey");
                  _TransportTaxKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TransportTaxKey");
                  OnTransportTaxKeyChanged();
              }
            }
        }
        private int _TransportTaxKey;
        partial void OnGetTransportTaxKey(ref int value);
        partial void OnTransportTaxKeyChanging(ref int value);
        partial void OnTransportTaxKeyChanged();
    
        /// <summary>
        /// There are no comments for TransportTaxID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string TransportTaxID
        {
            get
            {
                string value = _TransportTaxID;
                OnGetTransportTaxID(ref value);
                return value;
            }
            set
            {
                if (_TransportTaxID != value)
                {
                  OnTransportTaxIDChanging(ref value);
                  ReportPropertyChanging("TransportTaxID");
                  _TransportTaxID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TransportTaxID");
                  OnTransportTaxIDChanged();
              }
            }
        }
        private string _TransportTaxID;
        partial void OnGetTransportTaxID(ref string value);
        partial void OnTransportTaxIDChanging(ref string value);
        partial void OnTransportTaxIDChanged();
    
        /// <summary>
        /// There are no comments for Tax in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual decimal Tax
        {
            get
            {
                decimal value = _Tax;
                OnGetTax(ref value);
                return value;
            }
            set
            {
                if (_Tax != value)
                {
                  OnTaxChanging(ref value);
                  ReportPropertyChanging("Tax");
                  _Tax = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Tax");
                  OnTaxChanged();
              }
            }
        }
        private decimal _Tax;
        partial void OnGetTax(ref decimal value);
        partial void OnTaxChanging(ref decimal value);
        partial void OnTaxChanged();
    
        /// <summary>
        /// There are no comments for TrunkTypeKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int TrunkTypeKey
        {
            get
            {
                int value = _TrunkTypeKey;
                OnGetTrunkTypeKey(ref value);
                return value;
            }
            set
            {
                if (_TrunkTypeKey != value)
                {
                  OnTrunkTypeKeyChanging(ref value);
                  ReportPropertyChanging("TrunkTypeKey");
                  _TrunkTypeKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TrunkTypeKey");
                  OnTrunkTypeKeyChanged();
              }
            }
        }
        private int _TrunkTypeKey;
        partial void OnGetTrunkTypeKey(ref int value);
        partial void OnTrunkTypeKeyChanging(ref int value);
        partial void OnTrunkTypeKeyChanged();
    
        /// <summary>
        /// There are no comments for TransCompanyKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual int TransCompanyKey
        {
            get
            {
                int value = _TransCompanyKey;
                OnGetTransCompanyKey(ref value);
                return value;
            }
            set
            {
                if (_TransCompanyKey != value)
                {
                  OnTransCompanyKeyChanging(ref value);
                  ReportPropertyChanging("TransCompanyKey");
                  _TransCompanyKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TransCompanyKey");
                  OnTransCompanyKeyChanged();
              }
            }
        }
        private int _TransCompanyKey;
        partial void OnGetTransCompanyKey(ref int value);
        partial void OnTransCompanyKeyChanging(ref int value);
        partial void OnTransCompanyKeyChanged();
    
        /// <summary>
        /// There are no comments for FromTransportZoneKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int FromTransportZoneKey
        {
            get
            {
                int value = _FromTransportZoneKey;
                OnGetFromTransportZoneKey(ref value);
                return value;
            }
            set
            {
                if (_FromTransportZoneKey != value)
                {
                  OnFromTransportZoneKeyChanging(ref value);
                  ReportPropertyChanging("FromTransportZoneKey");
                  _FromTransportZoneKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("FromTransportZoneKey");
                  OnFromTransportZoneKeyChanged();
              }
            }
        }
        private int _FromTransportZoneKey;
        partial void OnGetFromTransportZoneKey(ref int value);
        partial void OnFromTransportZoneKeyChanging(ref int value);
        partial void OnFromTransportZoneKeyChanged();
    
        /// <summary>
        /// There are no comments for ToTransportZoneKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int ToTransportZoneKey
        {
            get
            {
                int value = _ToTransportZoneKey;
                OnGetToTransportZoneKey(ref value);
                return value;
            }
            set
            {
                if (_ToTransportZoneKey != value)
                {
                  OnToTransportZoneKeyChanging(ref value);
                  ReportPropertyChanging("ToTransportZoneKey");
                  _ToTransportZoneKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ToTransportZoneKey");
                  OnToTransportZoneKeyChanged();
              }
            }
        }
        private int _ToTransportZoneKey;
        partial void OnGetToTransportZoneKey(ref int value);
        partial void OnToTransportZoneKeyChanging(ref int value);
        partial void OnToTransportZoneKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for TrunkType in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TrunkType_TransportTax", "TrunkType")]
        public virtual TrunkType TrunkType
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrunkType>("WMDataAccess.Datamodel.TrunkType_TransportTax", "TrunkType").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrunkType>("WMDataAccess.Datamodel.TrunkType_TransportTax", "TrunkType").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TrunkType in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrunkType> TrunkTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrunkType>("WMDataAccess.Datamodel.TrunkType_TransportTax", "TrunkType");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TrunkType>("WMDataAccess.Datamodel.TrunkType_TransportTax", "TrunkType", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TrunkType>("WMDataAccess.Datamodel.TrunkType_TransportTax", "TrunkType").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TransportCompany in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportCompany_TransportTax", "TransportCompany")]
        public virtual TransportCompany TransportCompany
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_TransportTax", "TransportCompany").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_TransportTax", "TransportCompany").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for TransportCompany in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TransportCompany> TransportCompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_TransportTax", "TransportCompany");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_TransportTax", "TransportCompany", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportCompany>("WMDataAccess.Datamodel.TransportCompany_TransportTax", "TransportCompany").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for FromTransportZone in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportZone_TransportTax", "FromTransportZone")]
        public virtual TransportZone FromTransportZone
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportZone>("WMDataAccess.Datamodel.TransportZone_TransportTax", "FromTransportZone").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportZone>("WMDataAccess.Datamodel.TransportZone_TransportTax", "FromTransportZone").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for FromTransportZone in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TransportZone> FromTransportZoneReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportZone>("WMDataAccess.Datamodel.TransportZone_TransportTax", "FromTransportZone");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TransportZone>("WMDataAccess.Datamodel.TransportZone_TransportTax", "FromTransportZone", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportZone>("WMDataAccess.Datamodel.TransportZone_TransportTax", "FromTransportZone").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for ToTransportZone in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "TransportZone_TransportTax1", "ToTransportZone")]
        public virtual TransportZone ToTransportZone
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportZone>("WMDataAccess.Datamodel.TransportZone_TransportTax1", "ToTransportZone").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportZone>("WMDataAccess.Datamodel.TransportZone_TransportTax1", "ToTransportZone").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for ToTransportZone in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TransportZone> ToTransportZoneReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportZone>("WMDataAccess.Datamodel.TransportZone_TransportTax1", "ToTransportZone");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<TransportZone>("WMDataAccess.Datamodel.TransportZone_TransportTax1", "ToTransportZone", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<TransportZone>("WMDataAccess.Datamodel.TransportZone_TransportTax1", "ToTransportZone").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            TransportTax obj = new TransportTax();
            obj.TransportTaxKey = TransportTaxKey;
            obj.TransportTaxID = TransportTaxID;
            obj.Tax = Tax;
            obj.TrunkTypeKey = TrunkTypeKey;
            obj.TransCompanyKey = TransCompanyKey;
            obj.FromTransportZoneKey = FromTransportZoneKey;
            obj.ToTransportZoneKey = ToTransportZoneKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          TransportTax toCompare = obj as TransportTax;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.TransportTaxKey, toCompare.TransportTaxKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + TransportTaxKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.PickingArea in the schema.
    /// </summary>
    /// <KeyProperties>
    /// PickingKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="PickingArea")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [Net4Sage.Controls.Lookup.LookupFormTitle(@"Buscar Isla de Picking")]
    [Net4Sage.Controls.Lookup.LookupAutoShowColumns(false)]
    public partial class PickingArea : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new PickingArea object.
        /// </summary>
        /// <param name="pickingKey">Initial value of PickingKey.</param>
        /// <param name="pickingID">Initial value of PickingID.</param>
        /// <param name="description">Initial value of Description.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        public static PickingArea CreatePickingArea(short pickingKey, string pickingID, string description, string companyID)
        {
            PickingArea pickingArea = new PickingArea();
            pickingArea.PickingKey = pickingKey;
            pickingArea.PickingID = pickingID;
            pickingArea.Description = description;
            pickingArea.CompanyID = companyID;
            return pickingArea;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for PickingKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupKeyReturn]
        public virtual short PickingKey
        {
            get
            {
                short value = _PickingKey;
                OnGetPickingKey(ref value);
                return value;
            }
            set
            {
                if (_PickingKey != value)
                {
                  OnPickingKeyChanging(ref value);
                  ReportPropertyChanging("PickingKey");
                  _PickingKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("PickingKey");
                  OnPickingKeyChanged();
              }
            }
        }
        private short _PickingKey;
        partial void OnGetPickingKey(ref short value);
        partial void OnPickingKeyChanging(ref short value);
        partial void OnPickingKeyChanged();
    
        /// <summary>
        /// There are no comments for PickingID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        [Net4Sage.Controls.Lookup.LookupTextReturn]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Isla de Picking")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Isla de Picking")]
        public virtual string PickingID
        {
            get
            {
                string value = _PickingID;
                OnGetPickingID(ref value);
                return value;
            }
            set
            {
                if (_PickingID != value)
                {
                  OnPickingIDChanging(ref value);
                  ReportPropertyChanging("PickingID");
                  _PickingID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PickingID");
                  OnPickingIDChanged();
              }
            }
        }
        private string _PickingID;
        partial void OnGetPickingID(ref string value);
        partial void OnPickingIDChanging(ref string value);
        partial void OnPickingIDChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [Net4Sage.Controls.Lookup.LookupColumnFilter(@"Descripción")]
        [Net4Sage.Controls.Lookup.LookupColumnHeader(@"Descripción")]
        [Net4Sage.Controls.Lookup.LookupShowColumn]
        public virtual string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for WarehouseUbications in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "PickingArea_WarehouseUbication", "WarehouseUbications")]
        public virtual EntityCollection<WarehouseUbication> WarehouseUbications
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<WarehouseUbication>("WMDataAccess.Datamodel.PickingArea_WarehouseUbication", "WarehouseUbications");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<WarehouseUbication>("WMDataAccess.Datamodel.PickingArea_WarehouseUbication", "WarehouseUbications", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for WMSInventaries in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WMSInventary_PickingArea", "WMSInventaries")]
        public virtual EntityCollection<WMSInventary> WMSInventaries
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<WMSInventary>("WMDataAccess.Datamodel.WMSInventary_PickingArea", "WMSInventaries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<WMSInventary>("WMDataAccess.Datamodel.WMSInventary_PickingArea", "WMSInventaries", value);
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            PickingArea obj = new PickingArea();
            obj.PickingKey = PickingKey;
            obj.PickingID = PickingID;
            obj.Description = Description;
            obj.CompanyID = CompanyID;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          PickingArea toCompare = obj as PickingArea;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.PickingKey, toCompare.PickingKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + PickingKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.DispatchLineOrder in the schema.
    /// </summary>
    /// <KeyProperties>
    /// DDLineKey
    /// WOLineKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="DispatchLineOrder")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DispatchLineOrder : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new DispatchLineOrder object.
        /// </summary>
        /// <param name="dDLineKey">Initial value of DDLineKey.</param>
        /// <param name="wOLineKey">Initial value of WOLineKey.</param>
        public static DispatchLineOrder CreateDispatchLineOrder(int dDLineKey, int wOLineKey)
        {
            DispatchLineOrder dispatchLineOrder = new DispatchLineOrder();
            dispatchLineOrder.DDLineKey = dDLineKey;
            dispatchLineOrder.WOLineKey = wOLineKey;
            return dispatchLineOrder;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DDLineKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int DDLineKey
        {
            get
            {
                int value = _DDLineKey;
                OnGetDDLineKey(ref value);
                return value;
            }
            set
            {
                if (_DDLineKey != value)
                {
                  OnDDLineKeyChanging(ref value);
                  ReportPropertyChanging("DDLineKey");
                  _DDLineKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DDLineKey");
                  OnDDLineKeyChanged();
              }
            }
        }
        private int _DDLineKey;
        partial void OnGetDDLineKey(ref int value);
        partial void OnDDLineKeyChanging(ref int value);
        partial void OnDDLineKeyChanged();
    
        /// <summary>
        /// There are no comments for WOLineKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WOLineKey
        {
            get
            {
                int value = _WOLineKey;
                OnGetWOLineKey(ref value);
                return value;
            }
            set
            {
                if (_WOLineKey != value)
                {
                  OnWOLineKeyChanging(ref value);
                  ReportPropertyChanging("WOLineKey");
                  _WOLineKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WOLineKey");
                  OnWOLineKeyChanged();
              }
            }
        }
        private int _WOLineKey;
        partial void OnGetWOLineKey(ref int value);
        partial void OnWOLineKeyChanging(ref int value);
        partial void OnWOLineKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DispatchLine in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "DispatchLine_DispatchLineOrder", "DispatchLine")]
        public virtual DispatchLine DispatchLine
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DispatchLine>("WMDataAccess.Datamodel.DispatchLine_DispatchLineOrder", "DispatchLine").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DispatchLine>("WMDataAccess.Datamodel.DispatchLine_DispatchLineOrder", "DispatchLine").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DispatchLine in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DispatchLine> DispatchLineReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DispatchLine>("WMDataAccess.Datamodel.DispatchLine_DispatchLineOrder", "DispatchLine");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DispatchLine>("WMDataAccess.Datamodel.DispatchLine_DispatchLineOrder", "DispatchLine", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DispatchLine>("WMDataAccess.Datamodel.DispatchLine_DispatchLineOrder", "DispatchLine").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            DispatchLineOrder obj = new DispatchLineOrder();
            obj.DDLineKey = DDLineKey;
            obj.WOLineKey = WOLineKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          DispatchLineOrder toCompare = obj as DispatchLineOrder;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.DDLineKey, toCompare.DDLineKey))
            return false;
          if (!Object.Equals(this.WOLineKey, toCompare.WOLineKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + DDLineKey.GetHashCode();
          hashCode = (hashCode * 7) + WOLineKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WarehouseUbicationLogLevel in the schema.
    /// </summary>
    /// <KeyProperties>
    /// WhseUbicationKey
    /// LevelNo
    /// CapacityNo
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WarehouseUbicationLogLevel")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WarehouseUbicationLogLevel : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new WarehouseUbicationLogLevel object.
        /// </summary>
        /// <param name="whseUbicationKey">Initial value of WhseUbicationKey.</param>
        /// <param name="levelNo">Initial value of LevelNo.</param>
        /// <param name="capacityNo">Initial value of CapacityNo.</param>
        public static WarehouseUbicationLogLevel CreateWarehouseUbicationLogLevel(int whseUbicationKey, short levelNo, short capacityNo)
        {
            WarehouseUbicationLogLevel warehouseUbicationLogLevel = new WarehouseUbicationLogLevel();
            warehouseUbicationLogLevel.WhseUbicationKey = whseUbicationKey;
            warehouseUbicationLogLevel.LevelNo = levelNo;
            warehouseUbicationLogLevel.CapacityNo = capacityNo;
            return warehouseUbicationLogLevel;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for WhseUbicationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseUbicationKey
        {
            get
            {
                int value = _WhseUbicationKey;
                OnGetWhseUbicationKey(ref value);
                return value;
            }
            set
            {
                if (_WhseUbicationKey != value)
                {
                  OnWhseUbicationKeyChanging(ref value);
                  ReportPropertyChanging("WhseUbicationKey");
                  _WhseUbicationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseUbicationKey");
                  OnWhseUbicationKeyChanged();
              }
            }
        }
        private int _WhseUbicationKey;
        partial void OnGetWhseUbicationKey(ref int value);
        partial void OnWhseUbicationKeyChanging(ref int value);
        partial void OnWhseUbicationKeyChanged();
    
        /// <summary>
        /// There are no comments for LevelNo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short LevelNo
        {
            get
            {
                short value = _LevelNo;
                OnGetLevelNo(ref value);
                return value;
            }
            set
            {
                if (_LevelNo != value)
                {
                  OnLevelNoChanging(ref value);
                  ReportPropertyChanging("LevelNo");
                  _LevelNo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LevelNo");
                  OnLevelNoChanged();
              }
            }
        }
        private short _LevelNo;
        partial void OnGetLevelNo(ref short value);
        partial void OnLevelNoChanging(ref short value);
        partial void OnLevelNoChanged();
    
        /// <summary>
        /// There are no comments for CapacityNo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short CapacityNo
        {
            get
            {
                short value = _CapacityNo;
                OnGetCapacityNo(ref value);
                return value;
            }
            set
            {
                if (_CapacityNo != value)
                {
                  OnCapacityNoChanging(ref value);
                  ReportPropertyChanging("CapacityNo");
                  _CapacityNo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CapacityNo");
                  OnCapacityNoChanged();
              }
            }
        }
        private short _CapacityNo;
        partial void OnGetCapacityNo(ref short value);
        partial void OnCapacityNoChanging(ref short value);
        partial void OnCapacityNoChanged();
    
        /// <summary>
        /// There are no comments for LPNKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? LPNKey
        {
            get
            {
                int? value = _LPNKey;
                OnGetLPNKey(ref value);
                return value;
            }
            set
            {
                if (_LPNKey != value)
                {
                  OnLPNKeyChanging(ref value);
                  ReportPropertyChanging("LPNKey");
                  _LPNKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LPNKey");
                  OnLPNKeyChanged();
              }
            }
        }
        private int? _LPNKey;
        partial void OnGetLPNKey(ref int? value);
        partial void OnLPNKeyChanging(ref int? value);
        partial void OnLPNKeyChanged();
    
        /// <summary>
        /// There are no comments for ItemKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? ItemKey
        {
            get
            {
                int? value = _ItemKey;
                OnGetItemKey(ref value);
                return value;
            }
            set
            {
                if (_ItemKey != value)
                {
                  OnItemKeyChanging(ref value);
                  ReportPropertyChanging("ItemKey");
                  _ItemKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ItemKey");
                  OnItemKeyChanged();
              }
            }
        }
        private int? _ItemKey;
        partial void OnGetItemKey(ref int? value);
        partial void OnItemKeyChanging(ref int? value);
        partial void OnItemKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for LPNRelation in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "LPNRelation_WarehouseUbicationLogLevel", "LPNRelation")]
        public virtual LPNRelation LPNRelation
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_WarehouseUbicationLogLevel", "LPNRelation").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_WarehouseUbicationLogLevel", "LPNRelation").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for LPNRelation in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<LPNRelation> LPNRelationReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_WarehouseUbicationLogLevel", "LPNRelation");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_WarehouseUbicationLogLevel", "LPNRelation", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LPNRelation>("WMDataAccess.Datamodel.LPNRelation_WarehouseUbicationLogLevel", "LPNRelation").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for WarehouseUbicationLog in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WMDataAccess.Datamodel", "WarehouseUbicationLog_WarehouseUbicationLogLevel", "WarehouseUbicationLog")]
        public virtual WarehouseUbicationLog WarehouseUbicationLog
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbicationLog>("WMDataAccess.Datamodel.WarehouseUbicationLog_WarehouseUbicationLogLevel", "WarehouseUbicationLog").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbicationLog>("WMDataAccess.Datamodel.WarehouseUbicationLog_WarehouseUbicationLogLevel", "WarehouseUbicationLog").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for WarehouseUbicationLog in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarehouseUbicationLog> WarehouseUbicationLogReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbicationLog>("WMDataAccess.Datamodel.WarehouseUbicationLog_WarehouseUbicationLogLevel", "WarehouseUbicationLog");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<WarehouseUbicationLog>("WMDataAccess.Datamodel.WarehouseUbicationLog_WarehouseUbicationLogLevel", "WarehouseUbicationLog", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<WarehouseUbicationLog>("WMDataAccess.Datamodel.WarehouseUbicationLog_WarehouseUbicationLogLevel", "WarehouseUbicationLog").Value = null;
                }
            }
        }

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            WarehouseUbicationLogLevel obj = new WarehouseUbicationLogLevel();
            obj.WhseUbicationKey = WhseUbicationKey;
            obj.LevelNo = LevelNo;
            obj.CapacityNo = CapacityNo;
            obj.LPNKey = LPNKey;
            obj.ItemKey = ItemKey;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          WarehouseUbicationLogLevel toCompare = obj as WarehouseUbicationLogLevel;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.WhseUbicationKey, toCompare.WhseUbicationKey))
            return false;
          if (!Object.Equals(this.LevelNo, toCompare.LevelNo))
            return false;
          if (!Object.Equals(this.CapacityNo, toCompare.CapacityNo))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + WhseUbicationKey.GetHashCode();
          hashCode = (hashCode * 7) + LevelNo.GetHashCode();
          hashCode = (hashCode * 7) + CapacityNo.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WMSParameter in the schema.
    /// </summary>
    /// <KeyProperties>
    /// WMSParameterKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WMSParameter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WMSParameter : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new WMSParameter object.
        /// </summary>
        /// <param name="wMSParameterKey">Initial value of WMSParameterKey.</param>
        /// <param name="commodityCodeKey">Initial value of CommodityCodeKey.</param>
        /// <param name="savageMonth">Initial value of SavageMonth.</param>
        /// <param name="freshTime">Initial value of FreshTime.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        public static WMSParameter CreateWMSParameter(int wMSParameterKey, int commodityCodeKey, int savageMonth, int freshTime, string companyID)
        {
            WMSParameter wMSParameter = new WMSParameter();
            wMSParameter.WMSParameterKey = wMSParameterKey;
            wMSParameter.CommodityCodeKey = commodityCodeKey;
            wMSParameter.SavageMonth = savageMonth;
            wMSParameter.FreshTime = freshTime;
            wMSParameter.CompanyID = companyID;
            return wMSParameter;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for WMSParameterKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WMSParameterKey
        {
            get
            {
                int value = _WMSParameterKey;
                OnGetWMSParameterKey(ref value);
                return value;
            }
            set
            {
                if (_WMSParameterKey != value)
                {
                  OnWMSParameterKeyChanging(ref value);
                  ReportPropertyChanging("WMSParameterKey");
                  _WMSParameterKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WMSParameterKey");
                  OnWMSParameterKeyChanged();
              }
            }
        }
        private int _WMSParameterKey;
        partial void OnGetWMSParameterKey(ref int value);
        partial void OnWMSParameterKeyChanging(ref int value);
        partial void OnWMSParameterKeyChanged();
    
        /// <summary>
        /// There are no comments for CommodityCodeKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int CommodityCodeKey
        {
            get
            {
                int value = _CommodityCodeKey;
                OnGetCommodityCodeKey(ref value);
                return value;
            }
            set
            {
                if (_CommodityCodeKey != value)
                {
                  OnCommodityCodeKeyChanging(ref value);
                  ReportPropertyChanging("CommodityCodeKey");
                  _CommodityCodeKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CommodityCodeKey");
                  OnCommodityCodeKeyChanged();
              }
            }
        }
        private int _CommodityCodeKey;
        partial void OnGetCommodityCodeKey(ref int value);
        partial void OnCommodityCodeKeyChanging(ref int value);
        partial void OnCommodityCodeKeyChanged();
    
        /// <summary>
        /// There are no comments for ProdCategoryKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? ProdCategoryKey
        {
            get
            {
                int? value = _ProdCategoryKey;
                OnGetProdCategoryKey(ref value);
                return value;
            }
            set
            {
                if (_ProdCategoryKey != value)
                {
                  OnProdCategoryKeyChanging(ref value);
                  ReportPropertyChanging("ProdCategoryKey");
                  _ProdCategoryKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ProdCategoryKey");
                  OnProdCategoryKeyChanged();
              }
            }
        }
        private int? _ProdCategoryKey;
        partial void OnGetProdCategoryKey(ref int? value);
        partial void OnProdCategoryKeyChanging(ref int? value);
        partial void OnProdCategoryKeyChanged();
    
        /// <summary>
        /// There are no comments for ItemKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual int? ItemKey
        {
            get
            {
                int? value = _ItemKey;
                OnGetItemKey(ref value);
                return value;
            }
            set
            {
                if (_ItemKey != value)
                {
                  OnItemKeyChanging(ref value);
                  ReportPropertyChanging("ItemKey");
                  _ItemKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ItemKey");
                  OnItemKeyChanged();
              }
            }
        }
        private int? _ItemKey;
        partial void OnGetItemKey(ref int? value);
        partial void OnItemKeyChanging(ref int? value);
        partial void OnItemKeyChanged();
    
        /// <summary>
        /// There are no comments for SavageMonth in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int SavageMonth
        {
            get
            {
                int value = _SavageMonth;
                OnGetSavageMonth(ref value);
                return value;
            }
            set
            {
                if (_SavageMonth != value)
                {
                  OnSavageMonthChanging(ref value);
                  ReportPropertyChanging("SavageMonth");
                  _SavageMonth = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("SavageMonth");
                  OnSavageMonthChanged();
              }
            }
        }
        private int _SavageMonth;
        partial void OnGetSavageMonth(ref int value);
        partial void OnSavageMonthChanging(ref int value);
        partial void OnSavageMonthChanged();
    
        /// <summary>
        /// There are no comments for FreshTime in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int FreshTime
        {
            get
            {
                int value = _FreshTime;
                OnGetFreshTime(ref value);
                return value;
            }
            set
            {
                if (_FreshTime != value)
                {
                  OnFreshTimeChanging(ref value);
                  ReportPropertyChanging("FreshTime");
                  _FreshTime = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("FreshTime");
                  OnFreshTimeChanged();
              }
            }
        }
        private int _FreshTime = 0;
        partial void OnGetFreshTime(ref int value);
        partial void OnFreshTimeChanging(ref int value);
        partial void OnFreshTimeChanged();
    
        /// <summary>
        /// There are no comments for CompanyID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CompanyID
        {
            get
            {
                string value = _CompanyID;
                OnGetCompanyID(ref value);
                return value;
            }
            set
            {
                if (_CompanyID != value)
                {
                  OnCompanyIDChanging(ref value);
                  ReportPropertyChanging("CompanyID");
                  _CompanyID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyID");
                  OnCompanyIDChanged();
              }
            }
        }
        private string _CompanyID;
        partial void OnGetCompanyID(ref string value);
        partial void OnCompanyIDChanging(ref string value);
        partial void OnCompanyIDChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            WMSParameter obj = new WMSParameter();
            obj.WMSParameterKey = WMSParameterKey;
            obj.CommodityCodeKey = CommodityCodeKey;
            obj.ProdCategoryKey = ProdCategoryKey;
            obj.ItemKey = ItemKey;
            obj.SavageMonth = SavageMonth;
            obj.FreshTime = FreshTime;
            obj.CompanyID = CompanyID;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          WMSParameter toCompare = obj as WMSParameter;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.WMSParameterKey, toCompare.WMSParameterKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + WMSParameterKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WarehouseUbicationLogLevelWeight in the schema.
    /// </summary>
    /// <KeyProperties>
    /// WhseLogLevelWeightKey
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WarehouseUbicationLogLevelWeight")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WarehouseUbicationLogLevelWeight : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new WarehouseUbicationLogLevelWeight object.
        /// </summary>
        /// <param name="whseLogLevelWeightKey">Initial value of WhseLogLevelWeightKey.</param>
        /// <param name="whseUbicationKey">Initial value of WhseUbicationKey.</param>
        /// <param name="levelNo">Initial value of LevelNo.</param>
        /// <param name="capacityNo">Initial value of CapacityNo.</param>
        public static WarehouseUbicationLogLevelWeight CreateWarehouseUbicationLogLevelWeight(int whseLogLevelWeightKey, int whseUbicationKey, short levelNo, short capacityNo)
        {
            WarehouseUbicationLogLevelWeight warehouseUbicationLogLevelWeight = new WarehouseUbicationLogLevelWeight();
            warehouseUbicationLogLevelWeight.WhseLogLevelWeightKey = whseLogLevelWeightKey;
            warehouseUbicationLogLevelWeight.WhseUbicationKey = whseUbicationKey;
            warehouseUbicationLogLevelWeight.LevelNo = levelNo;
            warehouseUbicationLogLevelWeight.CapacityNo = capacityNo;
            return warehouseUbicationLogLevelWeight;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for WhseLogLevelWeightKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseLogLevelWeightKey
        {
            get
            {
                int value = _WhseLogLevelWeightKey;
                OnGetWhseLogLevelWeightKey(ref value);
                return value;
            }
            set
            {
                if (_WhseLogLevelWeightKey != value)
                {
                  OnWhseLogLevelWeightKeyChanging(ref value);
                  ReportPropertyChanging("WhseLogLevelWeightKey");
                  _WhseLogLevelWeightKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseLogLevelWeightKey");
                  OnWhseLogLevelWeightKeyChanged();
              }
            }
        }
        private int _WhseLogLevelWeightKey;
        partial void OnGetWhseLogLevelWeightKey(ref int value);
        partial void OnWhseLogLevelWeightKeyChanging(ref int value);
        partial void OnWhseLogLevelWeightKeyChanged();
    
        /// <summary>
        /// There are no comments for WhseUbicationKey in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int WhseUbicationKey
        {
            get
            {
                int value = _WhseUbicationKey;
                OnGetWhseUbicationKey(ref value);
                return value;
            }
            set
            {
                if (_WhseUbicationKey != value)
                {
                  OnWhseUbicationKeyChanging(ref value);
                  ReportPropertyChanging("WhseUbicationKey");
                  _WhseUbicationKey = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WhseUbicationKey");
                  OnWhseUbicationKeyChanged();
              }
            }
        }
        private int _WhseUbicationKey;
        partial void OnGetWhseUbicationKey(ref int value);
        partial void OnWhseUbicationKeyChanging(ref int value);
        partial void OnWhseUbicationKeyChanged();
    
        /// <summary>
        /// There are no comments for WeightMax in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual decimal? WeightMax
        {
            get
            {
                decimal? value = _WeightMax;
                OnGetWeightMax(ref value);
                return value;
            }
            set
            {
                if (_WeightMax != value)
                {
                  OnWeightMaxChanging(ref value);
                  ReportPropertyChanging("WeightMax");
                  _WeightMax = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WeightMax");
                  OnWeightMaxChanged();
              }
            }
        }
        private decimal? _WeightMax;
        partial void OnGetWeightMax(ref decimal? value);
        partial void OnWeightMaxChanging(ref decimal? value);
        partial void OnWeightMaxChanged();
    
        /// <summary>
        /// There are no comments for WeightMin in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual decimal? WeightMin
        {
            get
            {
                decimal? value = _WeightMin;
                OnGetWeightMin(ref value);
                return value;
            }
            set
            {
                if (_WeightMin != value)
                {
                  OnWeightMinChanging(ref value);
                  ReportPropertyChanging("WeightMin");
                  _WeightMin = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("WeightMin");
                  OnWeightMinChanged();
              }
            }
        }
        private decimal? _WeightMin;
        partial void OnGetWeightMin(ref decimal? value);
        partial void OnWeightMinChanging(ref decimal? value);
        partial void OnWeightMinChanged();
    
        /// <summary>
        /// There are no comments for LevelNo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short LevelNo
        {
            get
            {
                short value = _LevelNo;
                OnGetLevelNo(ref value);
                return value;
            }
            set
            {
                if (_LevelNo != value)
                {
                  OnLevelNoChanging(ref value);
                  ReportPropertyChanging("LevelNo");
                  _LevelNo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LevelNo");
                  OnLevelNoChanged();
              }
            }
        }
        private short _LevelNo;
        partial void OnGetLevelNo(ref short value);
        partial void OnLevelNoChanging(ref short value);
        partial void OnLevelNoChanged();
    
        /// <summary>
        /// There are no comments for CapacityNo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual short CapacityNo
        {
            get
            {
                short value = _CapacityNo;
                OnGetCapacityNo(ref value);
                return value;
            }
            set
            {
                if (_CapacityNo != value)
                {
                  OnCapacityNoChanging(ref value);
                  ReportPropertyChanging("CapacityNo");
                  _CapacityNo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CapacityNo");
                  OnCapacityNoChanged();
              }
            }
        }
        private short _CapacityNo;
        partial void OnGetCapacityNo(ref short value);
        partial void OnCapacityNoChanging(ref short value);
        partial void OnCapacityNoChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            WarehouseUbicationLogLevelWeight obj = new WarehouseUbicationLogLevelWeight();
            obj.WhseLogLevelWeightKey = WhseLogLevelWeightKey;
            obj.WhseUbicationKey = WhseUbicationKey;
            obj.WeightMax = WeightMax;
            obj.WeightMin = WeightMin;
            obj.LevelNo = LevelNo;
            obj.CapacityNo = CapacityNo;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          WarehouseUbicationLogLevelWeight toCompare = obj as WarehouseUbicationLogLevelWeight;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.WhseLogLevelWeightKey, toCompare.WhseLogLevelWeightKey))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + WhseLogLevelWeightKey.GetHashCode();
          return hashCode;
        }

        #endregion
    }

}

namespace WMDataAccess.Datamodel
{

    #region CenterType

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.CenterType in the schema.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="CenterType")]
    [DataContract]
    public enum CenterType : short
    {
    
        /// <summary>
        /// There are no comments for CenterType.ProductionCenter in the schema.
        /// </summary>
        [EnumMember]
        ProductionCenter = 1,    
        /// <summary>
        /// There are no comments for CenterType.DistributionCenter in the schema.
        /// </summary>
        [EnumMember]
        DistributionCenter = 2
    }
    #endregion

    #region GateType

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.GateType in the schema.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="GateType")]
    [DataContract]
    public enum GateType : short
    {
    
        /// <summary>
        /// There are no comments for GateType.InGate in the schema.
        /// </summary>
        [EnumMember]
        InGate = 1,    
        /// <summary>
        /// There are no comments for GateType.OutGate in the schema.
        /// </summary>
        [EnumMember]
        OutGate = 2
    }
    #endregion

    #region WarehouseUbicationBlockStatus

    /// <summary>
    /// There are no comments for WMDataAccess.Datamodel.WarehouseUbicationBlockStatus in the schema.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="WMDataAccess.Datamodel", Name="WarehouseUbicationBlockStatus")]
    [DataContract]
    public enum WarehouseUbicationBlockStatus : short
    {
    
        /// <summary>
        /// There are no comments for WarehouseUbicationBlockStatus.Free in the schema.
        /// </summary>
        [EnumMember]
        Free = 1,    
        /// <summary>
        /// There are no comments for WarehouseUbicationBlockStatus.BlockIn in the schema.
        /// </summary>
        [EnumMember]
        BlockIn = 2,    
        /// <summary>
        /// There are no comments for WarehouseUbicationBlockStatus.BlockOut in the schema.
        /// </summary>
        [EnumMember]
        BlockOut = 3,    
        /// <summary>
        /// There are no comments for WarehouseUbicationBlockStatus.FullBlock in the schema.
        /// </summary>
        [EnumMember]
        FullBlock = 4
    }
    #endregion

}
